{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Reactor from './Reactor';\nimport {\n  tx,\n  txInit,\n  lookup,\n  getOps,\n  type TxChunk,\n  type TransactionChunk,\n} from './instatx';\nimport weakHash from './utils/weakHash';\nimport id from './utils/uuid';\nimport IndexedDBStorage from './IndexedDBStorage';\nimport WindowNetworkListener from './WindowNetworkListener';\nimport { i } from './schema';\nimport { createDevtool } from './devtool';\nimport version from './version';\n\nimport type {\n  PresenceOpts,\n  PresenceResponse,\n  PresenceSlice,\n  RoomSchemaShape,\n} from './presence';\nimport type {\n  DevtoolConfig,\n  IDatabase,\n  IInstantDatabase,\n  StrictDevtoolConfig,\n} from './coreTypes';\nimport type {\n  Query,\n  QueryResponse,\n  InstaQLResponse,\n  PageInfoResponse,\n  Exactly,\n  InstantObject,\n  InstaQLParams,\n  InstaQLOptions,\n  InstaQLQueryParams,\n  InstaQLEntity,\n  InstaQLResult,\n  InstaQLFields,\n} from './queryTypes';\nimport type {\n  AuthState,\n  User,\n  AuthResult,\n  ConnectionStatus,\n} from './clientTypes';\nimport type {\n  InstantQuery,\n  InstantQueryResult,\n  InstantSchema,\n  InstantEntity,\n  InstantSchemaDatabase,\n} from './helperTypes';\nimport type {\n  AttrsDefs,\n  CardinalityKind,\n  DataAttrDef,\n  EntitiesDef,\n  EntitiesWithLinks,\n  EntityDef,\n  RoomsDef,\n  InstantSchemaDef,\n  InstantGraph,\n  LinkAttrDef,\n  LinkDef,\n  LinksDef,\n  PresenceOf,\n  ResolveAttrs,\n  RoomsOf,\n  TopicsOf,\n  ValueTypes,\n  InstantUnknownSchema,\n  BackwardsCompatibleSchema,\n  UpdateParams,\n  LinkParams,\n  RuleParams,\n} from './schemaTypes';\nimport type { UploadFileResponse, DeleteFileResponse } from './StorageAPI';\n\nimport type {\n  ExchangeCodeForTokenParams,\n  SendMagicCodeParams,\n  SendMagicCodeResponse,\n  SignInWithIdTokenParams,\n  VerifyMagicCodeParams,\n  VerifyResponse,\n} from './authAPI';\n\nconst defaultOpenDevtool = true;\n\n// types\n\nexport type Config = {\n  appId: string;\n  websocketURI?: string;\n  apiURI?: string;\n  devtool?: boolean | DevtoolConfig;\n};\n\nexport type InstantConfig<S extends InstantSchemaDef<any, any, any>> = {\n  appId: string;\n  websocketURI?: string;\n  apiURI?: string;\n  devtool?: boolean | DevtoolConfig;\n  schema?: S;\n};\n\nexport type ConfigWithSchema<S extends InstantGraph<any, any>> = Config & {\n  schema: S;\n};\n\nexport type TransactionResult = {\n  status: 'synced' | 'enqueued';\n  clientId: string;\n};\n\nexport type PublishTopic<TopicsByKey> = <Key extends keyof TopicsByKey>(\n  topic: Key,\n  data: TopicsByKey[Key],\n) => void;\n\nexport type SubscribeTopic<PresenceShape, TopicsByKey> = <\n  Key extends keyof TopicsByKey,\n>(\n  topic: Key,\n  onEvent: (event: TopicsByKey[Key], peer: PresenceShape) => void,\n) => () => void;\n\nexport type GetPresence<PresenceShape> = <Keys extends keyof PresenceShape>(\n  opts: PresenceOpts<PresenceShape, Keys>,\n) => PresenceResponse<PresenceShape, Keys>;\n\nexport type SubscribePresence<PresenceShape> = <\n  Keys extends keyof PresenceShape,\n>(\n  opts: PresenceOpts<PresenceShape, Keys>,\n  onChange: (slice: PresenceResponse<PresenceShape, Keys>) => void,\n) => () => void;\n\nexport type RoomHandle<PresenceShape, TopicsByKey> = {\n  leaveRoom: () => void;\n  publishTopic: PublishTopic<TopicsByKey>;\n  subscribeTopic: SubscribeTopic<PresenceShape, TopicsByKey>;\n  publishPresence: (data: Partial<PresenceShape>) => void;\n  getPresence: GetPresence<PresenceShape>;\n  subscribePresence: SubscribePresence<PresenceShape>;\n};\n\ntype AuthToken = string;\n\ntype SubscriptionState<Q, Schema, WithCardinalityInference extends boolean> =\n  | { error: { message: string }; data: undefined; pageInfo: undefined }\n  | {\n      error: undefined;\n      data: QueryResponse<Q, Schema, WithCardinalityInference>;\n      pageInfo: PageInfoResponse<Q>;\n    };\n\ntype InstaQLSubscriptionState<Schema, Q> =\n  | { error: { message: string }; data: undefined; pageInfo: undefined }\n  | {\n      error: undefined;\n      data: InstaQLResponse<Schema, Q>;\n      pageInfo: PageInfoResponse<Q>;\n    };\n\ntype LifecycleSubscriptionState<\n  Q,\n  Schema,\n  WithCardinalityInference extends boolean,\n> = SubscriptionState<Q, Schema, WithCardinalityInference> & {\n  isLoading: boolean;\n};\n\ntype InstaQLLifecycleState<Schema, Q> = InstaQLSubscriptionState<Schema, Q> & {\n  isLoading: boolean;\n};\n\ntype UnsubscribeFn = () => void;\n\n// consts\n\nconst defaultConfig = {\n  apiURI: 'https://api.instantdb.com',\n  websocketURI: 'wss://api.instantdb.com/runtime/session',\n};\n\n// hmr\nfunction initGlobalInstantCoreStore(): Record<string, any> {\n  globalThis.__instantDbStore = globalThis.__instantDbStore ?? {};\n  return globalThis.__instantDbStore;\n}\n\nfunction reactorKey(config: InstantConfig<any>): string {\n  // @ts-expect-error\n  const adminToken = config.__adminToken;\n  return (\n    config.appId +\n    '_' +\n    (config.websocketURI || 'default_ws_uri') +\n    '_' +\n    (config.apiURI || 'default_api_uri') +\n    '_' +\n    (adminToken || 'client_only')\n  );\n}\n\nconst globalInstantCoreStore = initGlobalInstantCoreStore();\n\ntype SignoutOpts = {\n  invalidateToken?: boolean;\n};\n\n/**\n * Functions to log users in and out.\n *\n * @see https://instantdb.com/docs/auth\n */\nclass Auth {\n  constructor(private db: Reactor) {}\n\n  /**\n   * Sends a magic code to the user's email address.\n   *\n   * Once you send the magic code, see {@link auth.signInWithMagicCode} to let the\n   * user verify.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *  db.auth.sendMagicCode({email: \"example@gmail.com\"})\n   *    .catch((err) => console.error(err.body?.message))\n   */\n  sendMagicCode = (\n    params: SendMagicCodeParams,\n  ): Promise<SendMagicCodeResponse> => {\n    return this.db.sendMagicCode(params);\n  };\n\n  /**\n   * Verify a magic code that was sent to the user's email address.\n   *\n   * @see https://instantdb.com/docs/auth\n   *\n   * @example\n   *  db.auth.signInWithMagicCode({email: \"example@gmail.com\", code: \"123456\"})\n   *       .catch((err) => console.error(err.body?.message))\n   */\n  signInWithMagicCode = (\n    params: VerifyMagicCodeParams,\n  ): Promise<VerifyResponse> => {\n    return this.db.signInWithMagicCode(params);\n  };\n\n  /**\n   * Sign in a user with a refresh token\n   *\n   * @see https://instantdb.com/docs/backend#frontend-auth-sign-in-with-token\n   *\n   * @example\n   *   // Get the token from your backend\n   *   const token = await fetch('/signin', ...);\n   *   //Sign in\n   *   db.auth.signInWithToken(token);\n   */\n  signInWithToken = (token: AuthToken): Promise<VerifyResponse> => {\n    return this.db.signInWithCustomToken(token);\n  };\n\n  /**\n   * Create an authorization url to sign in with an external provider\n   *\n   * @see https://instantdb.com/docs/auth\n   *\n   * @example\n   *   // Get the authorization url from your backend\n   *   const url = db.auth.createAuthorizationUrl({\n   *     clientName: \"google\",\n   *     redirectURL: window.location.href,\n   *   });\n   *\n   *   // Put it in a sign in link\n   *   <a href={url}>Log in with Google</a>\n   */\n  createAuthorizationURL = (params: {\n    clientName: string;\n    redirectURL: string;\n  }): string => {\n    return this.db.createAuthorizationURL(params);\n  };\n\n  /**\n   * Sign in with the id_token from an external provider like Google\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   db.auth\n   *  .signInWithIdToken({\n   *    // Token from external service\n   *    idToken: id_token,\n   *    // The name you gave the client when you registered it with Instant\n   *    clientName: \"google\",\n   *    // The nonce, if any, that you used when you initiated the auth flow\n   *    // with the external service.\n   *    nonce: your_nonce\n   *  })\n   *  .catch((err) => console.error(err.body?.message));\n   *\n   */\n  signInWithIdToken = (\n    params: SignInWithIdTokenParams,\n  ): Promise<VerifyResponse> => {\n    return this.db.signInWithIdToken(params);\n  };\n\n  /**\n   * Sign in with the id_token from an external provider like Google\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   db.auth\n   *  .exchangeOAuthCode({\n   *    // code received in redirect from OAuth callback\n   *    code: code\n   *    // The PKCE code_verifier, if any, that you used when you\n   *    // initiated the auth flow\n   *    codeVerifier: your_code_verifier\n   *  })\n   *  .catch((err) => console.error(err.body?.message));\n   *\n   */\n  exchangeOAuthCode = (params: ExchangeCodeForTokenParams) => {\n    return this.db.exchangeCodeForToken(params);\n  };\n\n  /**\n   * OpenID Discovery path for use with tools like\n   * expo-auth-session that use auto-discovery of\n   * OAuth parameters.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   const discovery = useAutoDiscovery(\n   *     db.auth.issuerURI()\n   *   );\n   */\n  issuerURI = (): string => {\n    return this.db.issuerURI();\n  };\n\n  /**\n   * Sign out the current user\n   */\n  signOut = (opts: SignoutOpts = { invalidateToken: true }): Promise<void> => {\n    return this.db.signOut(opts);\n  };\n}\n\ntype FileOpts = {\n  contentType?: string;\n  contentDisposition?: string;\n};\n\n/**\n * Functions to manage file storage.\n */\nclass Storage {\n  constructor(private db: Reactor) {}\n\n  /**\n   * Uploads file at the provided path.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   const [file] = e.target.files; // result of file input\n   *   const data = await db.storage.uploadFile('photos/demo.png', file);\n   */\n  uploadFile = (\n    path: string,\n    file: File,\n    opts: FileOpts = {},\n  ): Promise<UploadFileResponse> => {\n    return this.db.uploadFile(path, file, opts);\n  };\n\n  /**\n   * Deletes a file by path name.\n   *\n   * @see https://instantdb.com/docs/storage\n   * @example\n   *   await db.storage.delete('photos/demo.png');\n   */\n  delete = (pathname: string) => {\n    return this.db.deleteFile(pathname);\n  };\n\n  // Deprecated Storage API (Jan 2025)\n  // ---------------------------------\n\n  /**\n   * @deprecated. Use `db.storage.uploadFile` instead\n   * remove in the future.\n   */\n  upload = (pathname: string, file: File) => {\n    return this.db.upload(pathname, file);\n  };\n\n  /**\n   * @deprecated Use `db.storage.uploadFile` instead\n   */\n  put = this.upload;\n\n  /**\n   * @deprecated. getDownloadUrl will be removed in the future.\n   * Use `useQuery` instead to query and fetch for valid urls\n   *\n   * db.useQuery({\n   *   $files: {\n   *     $: {\n   *       where: {\n   *         path: \"moop.png\"\n   *       }\n   *     }\n   *   }\n   * })\n   */\n  getDownloadUrl = (pathname: string) => {\n    return this.db.getDownloadUrl(pathname);\n  };\n}\n\n// util\n\nfunction coerceQuery(o: any) {\n  // stringify and parse to remove undefined values\n  return JSON.parse(JSON.stringify(o));\n}\n\nclass InstantCoreDatabase<Schema extends InstantSchemaDef<any, any, any>>\n  implements IInstantDatabase<Schema>\n{\n  public _reactor: Reactor<RoomsOf<Schema>>;\n  public auth: Auth;\n  public storage: Storage;\n\n  public tx = txInit<Schema>();\n\n  constructor(reactor: Reactor<RoomsOf<Schema>>) {\n    this._reactor = reactor;\n    this.auth = new Auth(this._reactor);\n    this.storage = new Storage(this._reactor);\n  }\n\n  /**\n   * Use this to write data! You can create, update, delete, and link objects\n   *\n   * @see https://instantdb.com/docs/instaml\n   *\n   * @example\n   *   // Create a new object in the `goals` namespace\n   *   const goalId = id();\n   *   db.transact(db.tx.goals[goalId].update({title: \"Get fit\"}))\n   *\n   *   // Update the title\n   *   db.transact(db.tx.goals[goalId].update({title: \"Get super fit\"}))\n   *\n   *   // Delete it\n   *   db.transact(db.tx.goals[goalId].delete())\n   *\n   *   // Or create an association:\n   *   todoId = id();\n   *   db.transact([\n   *    db.tx.todos[todoId].update({ title: 'Go on a run' }),\n   *    db.tx.goals[goalId].link({todos: todoId}),\n   *  ])\n   */\n  transact(\n    chunks: TransactionChunk<any, any> | TransactionChunk<any, any>[],\n  ): Promise<TransactionResult> {\n    return this._reactor.pushTx(chunks);\n  }\n\n  getLocalId(name: string): Promise<string> {\n    return this._reactor.getLocalId(name);\n  }\n\n  /**\n   * Use this to query your data!\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *  // listen to all goals\n   *  db.subscribeQuery({ goals: {} }, (resp) => {\n   *    console.log(resp.data.goals)\n   *  })\n   *\n   *  // goals where the title is \"Get Fit\"\n   *  db.subscribeQuery(\n   *    { goals: { $: { where: { title: \"Get Fit\" } } } },\n   *    (resp) => {\n   *      console.log(resp.data.goals)\n   *    }\n   *  )\n   *\n   *  // all goals, _alongside_ their todos\n   *  db.subscribeQuery({ goals: { todos: {} } }, (resp) => {\n   *    console.log(resp.data.goals)\n   *  });\n   */\n  subscribeQuery<Q extends InstaQLParams<Schema>>(\n    query: Q,\n    cb: (resp: InstaQLSubscriptionState<Schema, Q>) => void,\n    opts?: InstaQLOptions,\n  ) {\n    return this._reactor.subscribeQuery(query, cb, opts);\n  }\n\n  /**\n   * Listen for the logged in state. This is useful\n   * for deciding when to show a login screen.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   const unsub = db.subscribeAuth((auth) => {\n   *     if (auth.user) {\n   *     console.log('logged in as', auth.user.email)\n   *    } else {\n   *      console.log('logged out')\n   *    }\n   *  })\n   */\n  subscribeAuth(cb: (auth: AuthResult) => void): UnsubscribeFn {\n    return this._reactor.subscribeAuth(cb);\n  }\n\n  /**\n   * One time query for the logged in state. This is useful\n   * for scenarios where you want to know the current auth\n   * state without subscribing to changes.\n   *\n   * @see https://instantdb.com/docs/auth\n   * @example\n   *   const user = await db.getAuth();\n   *   console.log('logged in as', user.email)\n   */\n  getAuth(): Promise<User | null> {\n    return this._reactor.getAuth();\n  }\n\n  /**\n   * Listen for connection status changes to Instant. This is useful\n   * for building things like connectivity indicators\n   *\n   * @see https://www.instantdb.com/docs/patterns#connection-status\n   * @example\n   *   const unsub = db.subscribeConnectionStatus((status) => {\n   *     const connectionState =\n   *       status === 'connecting' || status === 'opened'\n   *         ? 'authenticating'\n   *       : status === 'authenticated'\n   *         ? 'connected'\n   *       : status === 'closed'\n   *         ? 'closed'\n   *       : status === 'errored'\n   *         ? 'errored'\n   *       : 'unexpected state';\n   *\n   *     console.log('Connection status:', connectionState);\n   *   });\n   */\n  subscribeConnectionStatus(\n    cb: (status: ConnectionStatus) => void,\n  ): UnsubscribeFn {\n    return this._reactor.subscribeConnectionStatus(cb);\n  }\n\n  /**\n   * Join a room to publish and subscribe to topics and presence.\n   *\n   * @see https://instantdb.com/docs/presence-and-topics\n   * @example\n   * // init\n   * const db = init();\n   * const room = db.joinRoom(roomType, roomId);\n   * // usage\n   * const unsubscribeTopic = room.subscribeTopic(\"foo\", console.log);\n   * const unsubscribePresence = room.subscribePresence({}, console.log);\n   * room.publishTopic(\"hello\", { message: \"hello world!\" });\n   * room.publishPresence({ name: \"joe\" });\n   * // later\n   * unsubscribePresence();\n   * unsubscribeTopic();\n   * room.leaveRoom();\n   */\n  joinRoom<RoomType extends keyof RoomsOf<Schema>>(\n    roomType: RoomType = '_defaultRoomType' as RoomType,\n    roomId: string = '_defaultRoomId',\n  ): RoomHandle<PresenceOf<Schema, RoomType>, TopicsOf<Schema, RoomType>> {\n    const leaveRoom = this._reactor.joinRoom(roomId);\n\n    return {\n      leaveRoom,\n      subscribeTopic: (topic, onEvent) =>\n        this._reactor.subscribeTopic(roomId, topic, onEvent),\n      subscribePresence: (opts, onChange) =>\n        this._reactor.subscribePresence(roomType, roomId, opts, onChange),\n      publishTopic: (topic, data) =>\n        this._reactor.publishTopic({ roomType, roomId, topic, data }),\n      publishPresence: (data) =>\n        this._reactor.publishPresence(roomType, roomId, data),\n      getPresence: (opts) => this._reactor.getPresence(roomType, roomId, opts),\n    };\n  }\n\n  shutdown() {\n    delete globalInstantCoreStore[reactorKey(this._reactor.config)];\n    this._reactor.shutdown();\n  }\n\n  /**\n   * Use this for one-off queries.\n   * Returns local data if available, otherwise fetches from the server.\n   * Because we want to avoid stale data, this method will throw an error\n   * if the user is offline or there is no active connection to the server.\n   *\n   * @see https://instantdb.com/docs/instaql\n   *\n   * @example\n   *\n   *  const resp = await db.queryOnce({ goals: {} });\n   *  console.log(resp.data.goals)\n   */\n  queryOnce<Q extends InstaQLParams<Schema>>(\n    query: Q,\n    opts?: InstaQLOptions,\n  ): Promise<{\n    data: InstaQLResponse<Schema, Q>;\n    pageInfo: PageInfoResponse<Q>;\n  }> {\n    return this._reactor.queryOnce(query, opts);\n  }\n}\n\n/**\n *\n * The first step: init your application!\n *\n * Visit https://instantdb.com/dash to get your `appId` :)\n *\n * @example\n *  import { init } from \"@instantdb/core\"\n *\n *  const db = init({ appId: \"my-app-id\" })\n *\n *  // You can also provide a schema for type safety and editor autocomplete!\n *\n *  import { init } from \"@instantdb/core\"\n *  import schema from \"\"../instant.schema.ts\";\n *\n *  const db = init({ appId: \"my-app-id\", schema })\n *\n *  // To learn more: https://instantdb.com/docs/modeling-data\n */\nfunction init<\n  Schema extends InstantSchemaDef<any, any, any> = InstantUnknownSchema,\n>(\n  config: InstantConfig<Schema>,\n  Storage?: any,\n  NetworkListener?: any,\n  versions?: { [key: string]: string },\n): InstantCoreDatabase<Schema> {\n  const existingClient = globalInstantCoreStore[\n    reactorKey(config)\n  ] as InstantCoreDatabase<any>;\n\n  if (existingClient) {\n    return existingClient;\n  }\n\n  const reactor = new Reactor<RoomsOf<Schema>>(\n    {\n      ...defaultConfig,\n      ...config,\n      cardinalityInference: config.schema ? true : false,\n    },\n    Storage || IndexedDBStorage,\n    NetworkListener || WindowNetworkListener,\n    { ...(versions || {}), '@instantdb/core': version },\n  );\n\n  const client = new InstantCoreDatabase<any>(reactor);\n  globalInstantCoreStore[reactorKey(config)] = client;\n\n  handleDevtool(config.appId, config.devtool);\n\n  return client;\n}\n\nfunction handleDevtool(appId: string, devtool: boolean | DevtoolConfig) {\n  if (\n    typeof window === 'undefined' ||\n    typeof window.location === 'undefined' ||\n    typeof document === 'undefined'\n  ) {\n    return;\n  }\n\n  if (typeof devtool === 'boolean' && !devtool) {\n    return;\n  }\n\n  const config: StrictDevtoolConfig = {\n    position: 'bottom-right' as const,\n    allowedHosts: ['localhost'],\n    ...(typeof devtool === 'object' ? devtool : {}),\n  };\n\n  if (!config.allowedHosts.includes(window.location.hostname)) {\n    return;\n  }\n\n  createDevtool(appId, config);\n}\n\ntype InstantRules = {\n  [EntityName: string]: {\n    allow: {\n      view?: string;\n      create?: string;\n      update?: string;\n      delete?: string;\n      $default?: string;\n    };\n    bind?: string[];\n  };\n};\n\n/**\n * @deprecated\n * `init_experimental` is deprecated. You can replace it with `init`.\n *\n * @example\n *\n * // Before\n * import { init_experimental } from \"@instantdb/core\"\n * const db = init_experimental({  ...  });\n *\n * // After\n * import { init } from \"@instantdb/core\"\n * const db = init({ ...  });\n */\nconst init_experimental = init;\n\nexport {\n  // bada bing bada boom\n  init,\n  init_experimental,\n  id,\n  tx,\n  txInit,\n  lookup,\n\n  // cli\n  i,\n\n  // util\n  getOps,\n  coerceQuery,\n  weakHash,\n  IndexedDBStorage,\n  WindowNetworkListener,\n  InstantCoreDatabase,\n  Auth,\n  Storage,\n  version,\n\n  // og types\n  type IDatabase,\n  type RoomSchemaShape,\n  type Query,\n  type QueryResponse,\n  type InstaQLResponse,\n  type PageInfoResponse,\n  type InstantObject,\n  type Exactly,\n  type TransactionChunk,\n  type AuthState,\n  type ConnectionStatus,\n  type User,\n  type AuthToken,\n  type TxChunk,\n  type SubscriptionState,\n  type InstaQLSubscriptionState,\n  type LifecycleSubscriptionState,\n  type InstaQLLifecycleState,\n\n  // presence types\n  type PresenceOpts,\n  type PresenceSlice,\n  type PresenceResponse,\n\n  // new query types\n  type InstaQLParams,\n  type InstaQLOptions,\n  type InstaQLQueryParams,\n  type InstantQuery,\n  type InstantQueryResult,\n  type InstantSchema,\n  type InstantEntity,\n  type InstantSchemaDatabase,\n  type InstaQLFields,\n\n  // schema types\n  type AttrsDefs,\n  type CardinalityKind,\n  type DataAttrDef,\n  type EntitiesDef,\n  type EntitiesWithLinks,\n  type EntityDef,\n  type RoomsDef,\n  type InstantGraph,\n  type LinkAttrDef,\n  type LinkDef,\n  type LinksDef,\n  type ResolveAttrs,\n  type ValueTypes,\n  type RoomsOf,\n  type PresenceOf,\n  type TopicsOf,\n  type InstaQLEntity,\n  type InstaQLResult,\n  type InstantSchemaDef,\n  type InstantUnknownSchema,\n  type IInstantDatabase,\n  type BackwardsCompatibleSchema,\n  type InstantRules,\n  type UpdateParams,\n  type LinkParams,\n  type RuleParams,\n\n  // auth types\n  type ExchangeCodeForTokenParams,\n  type SendMagicCodeParams,\n  type SendMagicCodeResponse,\n  type SignInWithIdTokenParams,\n  type VerifyMagicCodeParams,\n  type VerifyResponse,\n\n  // storage types\n  type FileOpts,\n  type UploadFileResponse,\n  type DeleteFileResponse,\n};\n"]}