{"version":3,"file":"authAPI.js","sourceRoot":"","sources":["../src/authAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import { User } from './clientTypes';\nimport { jsonFetch } from './utils/fetch';\n\ntype SharedInput = {\n  apiURI: string;\n  appId: string;\n};\n\nexport type SendMagicCodeParams = { email: string };\nexport type SendMagicCodeResponse = {\n  sent: true;\n};\n\nexport function sendMagicCode({\n  apiURI,\n  appId,\n  email,\n}: SharedInput & SendMagicCodeParams): Promise<SendMagicCodeResponse> {\n  return jsonFetch(`${apiURI}/runtime/auth/send_magic_code`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({ 'app-id': appId, email }),\n  });\n}\n\nexport type VerifyMagicCodeParams = { email: string; code: string };\nexport type VerifyResponse = {\n  user: User;\n};\nexport async function verifyMagicCode({\n  apiURI,\n  appId,\n  email,\n  code,\n}: SharedInput & VerifyMagicCodeParams): Promise<VerifyResponse> {\n  const res = await jsonFetch(`${apiURI}/runtime/auth/verify_magic_code`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({ 'app-id': appId, email, code }),\n  });\n  return res;\n}\n\nexport type VerifyRefreshTokenParams = { refreshToken: string };\nexport async function verifyRefreshToken({\n  apiURI,\n  appId,\n  refreshToken,\n}: SharedInput & VerifyRefreshTokenParams): Promise<VerifyResponse> {\n  const res = await jsonFetch(`${apiURI}/runtime/auth/verify_refresh_token`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({\n      'app-id': appId,\n      'refresh-token': refreshToken,\n    }),\n  });\n  return res;\n}\n\nexport type ExchangeCodeForTokenParams = {\n  code: string;\n  codeVerifier?: string;\n};\n\nexport async function exchangeCodeForToken({\n  apiURI,\n  appId,\n  code,\n  codeVerifier,\n}: SharedInput & ExchangeCodeForTokenParams): Promise<VerifyResponse> {\n  const res = await jsonFetch(`${apiURI}/runtime/oauth/token`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({\n      app_id: appId,\n      code: code,\n      code_verifier: codeVerifier,\n    }),\n  });\n  return res;\n}\n\nexport type SignInWithIdTokenParams = {\n  nonce?: string;\n  idToken: string;\n  clientName: string;\n  refreshToken?: string;\n};\n\nexport async function signInWithIdToken({\n  apiURI,\n  appId,\n  nonce,\n  idToken,\n  clientName,\n  refreshToken,\n}: SharedInput & SignInWithIdTokenParams): Promise<VerifyResponse> {\n  const res = await jsonFetch(`${apiURI}/runtime/oauth/id_token`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify({\n      app_id: appId,\n      nonce,\n      id_token: idToken,\n      client_name: clientName,\n      refresh_token: refreshToken,\n    }),\n  });\n  return res;\n}\n\nexport type SignoutParams = { refreshToken: string };\nexport async function signOut({\n  apiURI,\n  appId,\n  refreshToken,\n}: SharedInput & SignoutParams): Promise<{}> {\n  const res = await jsonFetch(`${apiURI}/runtime/signout`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      app_id: appId,\n      refresh_token: refreshToken,\n    }),\n  });\n  return res;\n}\n"]}