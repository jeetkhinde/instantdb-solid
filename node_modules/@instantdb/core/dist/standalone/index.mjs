var mn = Object.defineProperty;
var Sn = (t, e, n) => e in t ? mn(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var y = (t, e, n) => Sn(t, typeof e != "symbol" ? e + "" : e, n);
let Xe = !1, qt = !1, Ft = !1;
typeof window < "u" && typeof window.localStorage < "u" && (Xe = !!window.localStorage.getItem("devBackend"), qt = !!window.localStorage.getItem("__instantLogging"), Ft = !!window.localStorage.getItem("__devtoolLocalDash"));
const ke = Xe || qt, P = {
  info: ke ? console.info.bind(console) : () => {
  },
  debug: ke ? console.debug.bind(console) : () => {
  },
  error: ke ? console.error.bind(console) : () => {
  }
};
function N(t) {
  if (typeof t == "number")
    return (Math.abs(t * 2654435761) >>> 0).toString(16);
  if (typeof t == "boolean") return t ? "1" : "0";
  if (t === null) return "null";
  if (t === void 0) return "undefined";
  if (typeof t == "string") {
    let e = 2166136261;
    for (let n = 0; n < t.length; n++)
      e ^= t.charCodeAt(n), e += (e << 1) + (e << 4) + (e << 7) + (e << 8) + (e << 24), e = e >>> 0;
    return e.toString(16);
  }
  if (Array.isArray(t)) {
    let e = 2166136261;
    for (let n = 0; n < t.length; n++) {
      e ^= (n + 1) * 2654435761;
      const r = N(t[n]);
      for (let s = 0; s < r.length; s++)
        e ^= r.charCodeAt(s), e *= 16777619, e = e >>> 0;
    }
    return e.toString(16);
  }
  if (typeof t == "object") {
    let e = 2166136261;
    const n = Object.keys(t).sort();
    for (let r = 0; r < n.length; r++) {
      const s = n[r], i = N(s);
      e ^= parseInt(i, 16), e *= 16777619, e = e >>> 0;
      const o = N(t[s]);
      e ^= parseInt(o, 16), e *= 16777619, e = e >>> 0;
    }
    return e.toString(16);
  }
  return N(String(t));
}
const M = {
  Remove: "remove",
  Replace: "replace",
  Add: "add"
}, zt = Symbol.for("__MUTATIVE_PROXY_DRAFT__"), On = Symbol("__MUTATIVE_RAW_RETURN_SYMBOL__"), ye = Symbol.iterator, U = {
  mutable: "mutable",
  immutable: "immutable"
}, Ze = {};
function ce(t, e) {
  return t instanceof Map ? t.has(e) : Object.prototype.hasOwnProperty.call(t, e);
}
function wt(t, e) {
  if (e in t) {
    let n = Reflect.getPrototypeOf(t);
    for (; n; ) {
      const r = Reflect.getOwnPropertyDescriptor(n, e);
      if (r)
        return r;
      n = Reflect.getPrototypeOf(n);
    }
  }
}
function et(t) {
  return Object.getPrototypeOf(t) === Set.prototype;
}
function tt(t) {
  return Object.getPrototypeOf(t) === Map.prototype;
}
function T(t) {
  var e;
  return (e = t.copy) !== null && e !== void 0 ? e : t.original;
}
function ee(t) {
  return !!m(t);
}
function m(t) {
  return typeof t != "object" ? null : t == null ? void 0 : t[zt];
}
function nt(t) {
  var e;
  const n = m(t);
  return n ? (e = n.copy) !== null && e !== void 0 ? e : n.original : t;
}
function F(t, e) {
  if (!t || typeof t != "object")
    return !1;
  let n;
  return Object.getPrototypeOf(t) === Object.prototype || Array.isArray(t) || t instanceof Map || t instanceof Set || !!(e != null && e.mark) && ((n = e.mark(t, U)) === U.immutable || typeof n == "function");
}
function Vt(t, e = []) {
  if (Object.hasOwnProperty.call(t, "key")) {
    const n = t.parent.copy, r = m(H(n, t.key));
    if (r !== null && (r == null ? void 0 : r.original) !== t.original)
      return null;
    const s = t.parent.type === 3, i = s ? Array.from(t.parent.setMap.keys()).indexOf(t.key) : t.key;
    if (!(s && n.size > i || ce(n, i)))
      return null;
    e.push(i);
  }
  if (t.parent)
    return Vt(t.parent, e);
  e.reverse();
  try {
    vn(t.copy, e);
  } catch {
    return null;
  }
  return e;
}
function te(t) {
  return Array.isArray(t) ? 1 : t instanceof Map ? 2 : t instanceof Set ? 3 : 0;
}
function H(t, e) {
  return te(t) === 2 ? t.get(e) : t[e];
}
function le(t, e, n) {
  te(t) === 2 ? t.set(e, n) : t[e] = n;
}
function Ee(t, e) {
  const n = m(t);
  return (n ? T(n) : t)[e];
}
function K(t, e) {
  return t === e ? t !== 0 || 1 / t === 1 / e : t !== t && e !== e;
}
function Te(t) {
  if (t)
    for (; t.finalities.revoke.length > 0; )
      t.finalities.revoke.pop()();
}
function X(t, e) {
  return e ? t : [""].concat(t).map((n) => {
    const r = `${n}`;
    return r.indexOf("/") === -1 && r.indexOf("~") === -1 ? r : r.replace(/~/g, "~0").replace(/\//g, "~1");
  }).join("/");
}
function vn(t, e) {
  for (let n = 0; n < e.length - 1; n += 1) {
    const r = e[n];
    if (t = H(te(t) === 3 ? Array.from(t) : t, r), typeof t != "object")
      throw new Error(`Cannot resolve patch at '${e.join("/")}'.`);
  }
  return t;
}
function Mn(t) {
  const e = Object.create(Object.getPrototypeOf(t));
  return Reflect.ownKeys(t).forEach((n) => {
    let r = Reflect.getOwnPropertyDescriptor(t, n);
    if (r.enumerable && r.configurable && r.writable) {
      e[n] = t[n];
      return;
    }
    r.writable || (r.writable = !0, r.configurable = !0), (r.get || r.set) && (r = {
      configurable: !0,
      writable: !0,
      enumerable: r.enumerable,
      value: t[n]
    }), Reflect.defineProperty(e, n, r);
  }), e;
}
const Pn = Object.prototype.propertyIsEnumerable;
function Wt(t, e) {
  let n;
  if (Array.isArray(t))
    return Array.prototype.concat.call(t);
  if (t instanceof Set) {
    if (!et(t)) {
      const r = Object.getPrototypeOf(t).constructor;
      return new r(t.values());
    }
    return Set.prototype.difference ? Set.prototype.difference.call(t, /* @__PURE__ */ new Set()) : new Set(t.values());
  } else if (t instanceof Map) {
    if (!tt(t)) {
      const r = Object.getPrototypeOf(t).constructor;
      return new r(t);
    }
    return new Map(t);
  } else if (e != null && e.mark && (n = e.mark(t, U), n !== void 0) && n !== U.mutable) {
    if (n === U.immutable)
      return Mn(t);
    if (typeof n == "function") {
      if (e.enablePatches || e.enableAutoFreeze)
        throw new Error("You can't use mark and patches or auto freeze together.");
      return n();
    }
    throw new Error(`Unsupported mark result: ${n}`);
  } else if (typeof t == "object" && Object.getPrototypeOf(t) === Object.prototype) {
    const r = {};
    return Object.keys(t).forEach((s) => {
      r[s] = t[s];
    }), Object.getOwnPropertySymbols(t).forEach((s) => {
      Pn.call(t, s) && (r[s] = t[s]);
    }), r;
  } else
    throw new Error("Please check mark() to ensure that it is a stable marker draftable function.");
}
function k(t) {
  t.copy || (t.copy = Wt(t.original, t.options));
}
function oe(t) {
  if (!F(t))
    return nt(t);
  if (Array.isArray(t))
    return t.map(oe);
  if (t instanceof Map) {
    const n = Array.from(t.entries()).map(([r, s]) => [
      r,
      oe(s)
    ]);
    if (!tt(t)) {
      const r = Object.getPrototypeOf(t).constructor;
      return new r(n);
    }
    return new Map(n);
  }
  if (t instanceof Set) {
    const n = Array.from(t).map(oe);
    if (!et(t)) {
      const r = Object.getPrototypeOf(t).constructor;
      return new r(n);
    }
    return new Set(n);
  }
  const e = Object.create(Object.getPrototypeOf(t));
  for (const n in t)
    e[n] = oe(t[n]);
  return e;
}
function be(t) {
  return ee(t) ? oe(t) : t;
}
function V(t) {
  var e;
  t.assignedMap = (e = t.assignedMap) !== null && e !== void 0 ? e : /* @__PURE__ */ new Map(), t.operated || (t.operated = !0, t.parent && V(t.parent));
}
function gt() {
  throw new Error("Cannot modify frozen object");
}
function re(t, e, n, r, s) {
  {
    n = n ?? /* @__PURE__ */ new WeakMap(), r = r ?? [], s = s ?? [];
    const o = n.has(t) ? n.get(t) : t;
    if (r.length > 0) {
      const a = r.indexOf(o);
      if (o && typeof o == "object" && a !== -1)
        throw r[0] === o ? new Error("Forbids circular reference") : new Error(`Forbids circular reference: ~/${s.slice(0, a).map((c, u) => {
          if (typeof c == "symbol")
            return `[${c.toString()}]`;
          const f = r[u];
          return typeof c == "object" && (f instanceof Map || f instanceof Set) ? Array.from(f.keys()).indexOf(c) : c;
        }).join("/")}`);
      r.push(o), s.push(e);
    } else
      r.push(o);
  }
  if (Object.isFrozen(t) || ee(t)) {
    r.pop(), s.pop();
    return;
  }
  switch (te(t)) {
    case 2:
      for (const [a, c] of t)
        re(a, a, n, r, s), re(c, a, n, r, s);
      t.set = t.clear = t.delete = gt;
      break;
    case 3:
      for (const a of t)
        re(a, a, n, r, s);
      t.add = t.clear = t.delete = gt;
      break;
    case 1:
      Object.freeze(t);
      let o = 0;
      for (const a of t)
        re(a, o, n, r, s), o += 1;
      break;
    default:
      Object.freeze(t), Object.keys(t).forEach((a) => {
        const c = t[a];
        re(c, a, n, r, s);
      });
  }
  r.pop(), s.pop();
}
function rt(t, e) {
  const n = te(t);
  if (n === 0)
    Reflect.ownKeys(t).forEach((r) => {
      e(r, t[r], t);
    });
  else if (n === 1) {
    let r = 0;
    for (const s of t)
      e(r, s, t), r += 1;
  } else
    t.forEach((r, s) => e(s, r, t));
}
function Qt(t, e, n) {
  if (ee(t) || !F(t, n) || e.has(t) || Object.isFrozen(t))
    return;
  const r = t instanceof Set, s = r ? /* @__PURE__ */ new Map() : void 0;
  if (e.add(t), rt(t, (i, o) => {
    var a;
    if (ee(o)) {
      const c = m(o);
      k(c);
      const u = !((a = c.assignedMap) === null || a === void 0) && a.size || c.operated ? c.copy : c.original;
      le(r ? s : t, i, u);
    } else
      Qt(o, e, n);
  }), s) {
    const i = t, o = Array.from(i);
    i.clear(), o.forEach((a) => {
      i.add(s.has(a) ? s.get(a) : a);
    });
  }
}
function An(t, e) {
  const n = t.type === 3 ? t.setMap : t.copy;
  t.finalities.revoke.length > 1 && t.assignedMap.get(e) && n && Qt(H(n, e), t.finalities.handledSet, t.options);
}
function xe(t) {
  t.type === 3 && t.copy && (t.copy.clear(), t.setMap.forEach((e) => {
    t.copy.add(nt(e));
  }));
}
function $e(t, e, n, r) {
  if (t.operated && t.assignedMap && t.assignedMap.size > 0 && !t.finalized) {
    if (n && r) {
      const i = Vt(t);
      i && e(t, i, n, r);
    }
    t.finalized = !0;
  }
}
function st(t, e, n, r) {
  const s = m(n);
  s && (s.callbacks || (s.callbacks = []), s.callbacks.push((i, o) => {
    var a;
    const c = t.type === 3 ? t.setMap : t.copy;
    if (K(H(c, e), n)) {
      let u = s.original;
      s.copy && (u = s.copy), xe(t), $e(t, r, i, o), t.options.enableAutoFreeze && (t.options.updatedValues = (a = t.options.updatedValues) !== null && a !== void 0 ? a : /* @__PURE__ */ new WeakMap(), t.options.updatedValues.set(u, s.original)), le(c, e, u);
    }
  }), t.options.enableAutoFreeze && s.finalities !== t.finalities && (t.options.enableAutoFreeze = !1)), F(n, t.options) && t.finalities.draft.push(() => {
    const i = t.type === 3 ? t.setMap : t.copy;
    K(H(i, e), n) && An(t, e);
  });
}
function Cn(t, e, n, r, s) {
  let { original: i, assignedMap: o, options: a } = t, c = t.copy;
  c.length < i.length && ([i, c] = [c, i], [n, r] = [r, n]);
  for (let u = 0; u < i.length; u += 1)
    if (o.get(u.toString()) && c[u] !== i[u]) {
      const f = e.concat([u]), l = X(f, s);
      n.push({
        op: M.Replace,
        path: l,
        // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
        value: be(c[u])
      }), r.push({
        op: M.Replace,
        path: l,
        // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
        value: be(i[u])
      });
    }
  for (let u = i.length; u < c.length; u += 1) {
    const f = e.concat([u]), l = X(f, s);
    n.push({
      op: M.Add,
      path: l,
      // If it is a draft, it needs to be deep cloned, and it may also be non-draft.
      value: be(c[u])
    });
  }
  if (i.length < c.length) {
    const { arrayLengthAssignment: u = !0 } = a.enablePatches;
    if (u) {
      const f = e.concat(["length"]), l = X(f, s);
      r.push({
        op: M.Replace,
        path: l,
        value: i.length
      });
    } else
      for (let f = c.length; i.length < f; f -= 1) {
        const l = e.concat([f - 1]), d = X(l, s);
        r.push({
          op: M.Remove,
          path: d
        });
      }
  }
}
function kn({ original: t, copy: e, assignedMap: n }, r, s, i, o) {
  n.forEach((a, c) => {
    const u = H(t, c), f = be(H(e, c)), l = a ? ce(t, c) ? M.Replace : M.Add : M.Remove;
    if (K(u, f) && l === M.Replace)
      return;
    const d = r.concat(c), h = X(d, o);
    s.push(l === M.Remove ? { op: l, path: h } : { op: l, path: h, value: f }), i.push(l === M.Add ? { op: M.Remove, path: h } : l === M.Remove ? { op: M.Add, path: h, value: u } : { op: M.Replace, path: h, value: u });
  });
}
function En({ original: t, copy: e }, n, r, s, i) {
  let o = 0;
  t.forEach((a) => {
    if (!e.has(a)) {
      const c = n.concat([o]), u = X(c, i);
      r.push({
        op: M.Remove,
        path: u,
        value: a
      }), s.unshift({
        op: M.Add,
        path: u,
        value: a
      });
    }
    o += 1;
  }), o = 0, e.forEach((a) => {
    if (!t.has(a)) {
      const c = n.concat([o]), u = X(c, i);
      r.push({
        op: M.Add,
        path: u,
        value: a
      }), s.unshift({
        op: M.Remove,
        path: u,
        value: a
      });
    }
    o += 1;
  });
}
function fe(t, e, n, r) {
  const { pathAsArray: s = !0 } = t.options.enablePatches;
  switch (t.type) {
    case 0:
    case 2:
      return kn(t, e, n, r, s);
    case 1:
      return Cn(t, e, n, r, s);
    case 3:
      return En(t, e, n, r, s);
  }
}
const we = (t, e, n = !1) => {
  if (typeof t == "object" && t !== null && (!F(t, e) || n))
    throw new Error("Strict mode: Mutable data cannot be accessed directly, please use 'unsafe(callback)' wrap.");
}, Ue = {
  get size() {
    return T(m(this)).size;
  },
  has(t) {
    return T(m(this)).has(t);
  },
  set(t, e) {
    const n = m(this), r = T(n);
    return (!r.has(t) || !K(r.get(t), e)) && (k(n), V(n), n.assignedMap.set(t, !0), n.copy.set(t, e), st(n, t, e, fe)), this;
  },
  delete(t) {
    if (!this.has(t))
      return !1;
    const e = m(this);
    return k(e), V(e), e.original.has(t) ? e.assignedMap.set(t, !1) : e.assignedMap.delete(t), e.copy.delete(t), !0;
  },
  clear() {
    const t = m(this);
    if (this.size) {
      k(t), V(t), t.assignedMap = /* @__PURE__ */ new Map();
      for (const [e] of t.original)
        t.assignedMap.set(e, !1);
      t.copy.clear();
    }
  },
  forEach(t, e) {
    const n = m(this);
    T(n).forEach((r, s) => {
      t.call(e, this.get(s), s, this);
    });
  },
  get(t) {
    var e, n;
    const r = m(this), s = T(r).get(t), i = ((n = (e = r.options).mark) === null || n === void 0 ? void 0 : n.call(e, s, U)) === U.mutable;
    if (r.options.strict && we(s, r.options, i), i || r.finalized || !F(s, r.options) || s !== r.original.get(t))
      return s;
    const o = Ze.createDraft({
      original: s,
      parentDraft: r,
      key: t,
      finalities: r.finalities,
      options: r.options
    });
    return k(r), r.copy.set(t, o), o;
  },
  keys() {
    return T(m(this)).keys();
  },
  values() {
    const t = this.keys();
    return {
      [ye]: () => this.values(),
      next: () => {
        const e = t.next();
        return e.done ? e : {
          done: !1,
          value: this.get(e.value)
        };
      }
    };
  },
  entries() {
    const t = this.keys();
    return {
      [ye]: () => this.entries(),
      next: () => {
        const e = t.next();
        if (e.done)
          return e;
        const n = this.get(e.value);
        return {
          done: !1,
          value: [e.value, n]
        };
      }
    };
  },
  [ye]() {
    return this.entries();
  }
}, In = Reflect.ownKeys(Ue), mt = (t, e, { isValuesIterator: n }) => () => {
  var r, s;
  const i = e.next();
  if (i.done)
    return i;
  const o = i.value;
  let a = t.setMap.get(o);
  const c = m(a), u = ((s = (r = t.options).mark) === null || s === void 0 ? void 0 : s.call(r, a, U)) === U.mutable;
  if (t.options.strict && we(o, t.options, u), !u && !c && F(o, t.options) && !t.finalized && t.original.has(o)) {
    const f = Ze.createDraft({
      original: o,
      parentDraft: t,
      key: o,
      finalities: t.finalities,
      options: t.options
    });
    t.setMap.set(o, f), a = f;
  } else c && (a = c.proxy);
  return {
    done: !1,
    value: n ? a : [a, a]
  };
}, ge = {
  get size() {
    return m(this).setMap.size;
  },
  has(t) {
    const e = m(this);
    if (e.setMap.has(t))
      return !0;
    k(e);
    const n = m(t);
    return !!(n && e.setMap.has(n.original));
  },
  add(t) {
    const e = m(this);
    return this.has(t) || (k(e), V(e), e.assignedMap.set(t, !0), e.setMap.set(t, t), st(e, t, t, fe)), this;
  },
  delete(t) {
    if (!this.has(t))
      return !1;
    const e = m(this);
    k(e), V(e);
    const n = m(t);
    return n && e.setMap.has(n.original) ? (e.assignedMap.set(n.original, !1), e.setMap.delete(n.original)) : (!n && e.setMap.has(t) ? e.assignedMap.set(t, !1) : e.assignedMap.delete(t), e.setMap.delete(t));
  },
  clear() {
    if (!this.size)
      return;
    const t = m(this);
    k(t), V(t);
    for (const e of t.original)
      t.assignedMap.set(e, !1);
    t.setMap.clear();
  },
  values() {
    const t = m(this);
    k(t);
    const e = t.setMap.keys();
    return {
      [Symbol.iterator]: () => this.values(),
      next: mt(t, e, { isValuesIterator: !0 })
    };
  },
  entries() {
    const t = m(this);
    k(t);
    const e = t.setMap.keys();
    return {
      [Symbol.iterator]: () => this.entries(),
      next: mt(t, e, {
        isValuesIterator: !1
      })
    };
  },
  keys() {
    return this.values();
  },
  [ye]() {
    return this.values();
  },
  forEach(t, e) {
    const n = this.values();
    let r = n.next();
    for (; !r.done; )
      t.call(e, r.value, r.value, this), r = n.next();
  }
};
Set.prototype.difference && Object.assign(ge, {
  intersection(t) {
    return Set.prototype.intersection.call(new Set(this.values()), t);
  },
  union(t) {
    return Set.prototype.union.call(new Set(this.values()), t);
  },
  difference(t) {
    return Set.prototype.difference.call(new Set(this.values()), t);
  },
  symmetricDifference(t) {
    return Set.prototype.symmetricDifference.call(new Set(this.values()), t);
  },
  isSubsetOf(t) {
    return Set.prototype.isSubsetOf.call(new Set(this.values()), t);
  },
  isSupersetOf(t) {
    return Set.prototype.isSupersetOf.call(new Set(this.values()), t);
  },
  isDisjointFrom(t) {
    return Set.prototype.isDisjointFrom.call(new Set(this.values()), t);
  }
});
const Rn = Reflect.ownKeys(ge), Jt = /* @__PURE__ */ new WeakSet(), Bt = {
  get(t, e, n) {
    var r, s;
    const i = (r = t.copy) === null || r === void 0 ? void 0 : r[e];
    if (i && Jt.has(i))
      return i;
    if (e === zt)
      return t;
    let o;
    if (t.options.mark) {
      const u = e === "size" && (t.original instanceof Map || t.original instanceof Set) ? Reflect.get(t.original, e) : Reflect.get(t.original, e, n);
      if (o = t.options.mark(u, U), o === U.mutable)
        return t.options.strict && we(u, t.options, !0), u;
    }
    const a = T(t);
    if (a instanceof Map && In.includes(e)) {
      if (e === "size")
        return Object.getOwnPropertyDescriptor(Ue, "size").get.call(t.proxy);
      const u = Ue[e];
      if (u)
        return u.bind(t.proxy);
    }
    if (a instanceof Set && Rn.includes(e)) {
      if (e === "size")
        return Object.getOwnPropertyDescriptor(ge, "size").get.call(t.proxy);
      const u = ge[e];
      if (u)
        return u.bind(t.proxy);
    }
    if (!ce(a, e)) {
      const u = wt(a, e);
      return u ? "value" in u ? u.value : (
        // !case: support for getter
        (s = u.get) === null || s === void 0 ? void 0 : s.call(t.proxy)
      ) : void 0;
    }
    const c = a[e];
    if (t.options.strict && we(c, t.options), t.finalized || !F(c, t.options))
      return c;
    if (c === Ee(t.original, e)) {
      if (k(t), t.copy[e] = it({
        original: t.original[e],
        parentDraft: t,
        key: t.type === 1 ? Number(e) : e,
        finalities: t.finalities,
        options: t.options
      }), typeof o == "function") {
        const u = m(t.copy[e]);
        return k(u), V(u), u.copy;
      }
      return t.copy[e];
    }
    return c;
  },
  set(t, e, n) {
    var r;
    if (t.type === 3 || t.type === 2)
      throw new Error("Map/Set draft does not support any property assignment.");
    let s;
    if (t.type === 1 && e !== "length" && !(Number.isInteger(s = Number(e)) && s >= 0 && (e === 0 || s === 0 || String(s) === String(e))))
      throw new Error("Only supports setting array indices and the 'length' property.");
    const i = wt(T(t), e);
    if (i != null && i.set)
      return i.set.call(t.proxy, n), !0;
    const o = Ee(T(t), e), a = m(o);
    return a && K(a.original, n) ? (t.copy[e] = n, t.assignedMap = (r = t.assignedMap) !== null && r !== void 0 ? r : /* @__PURE__ */ new Map(), t.assignedMap.set(e, !1), !0) : (K(n, o) && (n !== void 0 || ce(t.original, e)) || (k(t), V(t), ce(t.original, e) && K(n, t.original[e]) ? t.assignedMap.delete(e) : t.assignedMap.set(e, !0), t.copy[e] = n, st(t, e, n, fe)), !0);
  },
  has(t, e) {
    return e in T(t);
  },
  ownKeys(t) {
    return Reflect.ownKeys(T(t));
  },
  getOwnPropertyDescriptor(t, e) {
    const n = T(t), r = Reflect.getOwnPropertyDescriptor(n, e);
    return r && {
      writable: !0,
      configurable: t.type !== 1 || e !== "length",
      enumerable: r.enumerable,
      value: n[e]
    };
  },
  getPrototypeOf(t) {
    return Reflect.getPrototypeOf(t.original);
  },
  setPrototypeOf() {
    throw new Error("Cannot call 'setPrototypeOf()' on drafts");
  },
  defineProperty() {
    throw new Error("Cannot call 'defineProperty()' on drafts");
  },
  deleteProperty(t, e) {
    var n;
    return t.type === 1 ? Bt.set.call(this, t, e, void 0, t.proxy) : (Ee(t.original, e) !== void 0 || e in t.original ? (k(t), V(t), t.assignedMap.set(e, !1)) : (t.assignedMap = (n = t.assignedMap) !== null && n !== void 0 ? n : /* @__PURE__ */ new Map(), t.assignedMap.delete(e)), t.copy && delete t.copy[e], !0);
  }
};
function it(t) {
  const { original: e, parentDraft: n, key: r, finalities: s, options: i } = t, o = te(e), a = {
    type: o,
    finalized: !1,
    parent: n,
    original: e,
    copy: null,
    proxy: null,
    finalities: s,
    options: i,
    // Mapping of draft Set items to their corresponding draft values.
    setMap: o === 3 ? new Map(e.entries()) : void 0
  };
  (r || "key" in t) && (a.key = r);
  const { proxy: c, revoke: u } = Proxy.revocable(o === 1 ? Object.assign([], a) : a, Bt);
  if (s.revoke.push(u), Jt.add(c), a.proxy = c, n) {
    const f = n;
    f.finalities.draft.push((l, d) => {
      var h, p;
      const b = m(c);
      let _ = f.type === 3 ? f.setMap : f.copy;
      const w = H(_, r), S = m(w);
      if (S) {
        let v = S.original;
        S.operated && (v = nt(w)), xe(S), $e(S, fe, l, d), f.options.enableAutoFreeze && (f.options.updatedValues = (h = f.options.updatedValues) !== null && h !== void 0 ? h : /* @__PURE__ */ new WeakMap(), f.options.updatedValues.set(v, S.original)), le(_, r, v);
      }
      (p = b.callbacks) === null || p === void 0 || p.forEach((v) => {
        v(l, d);
      });
    });
  } else {
    const f = m(c);
    f.finalities.draft.push((l, d) => {
      xe(f), $e(f, fe, l, d);
    });
  }
  return c;
}
Ze.createDraft = it;
function jn(t, e, n, r, s) {
  var i;
  const o = m(t), a = (i = o == null ? void 0 : o.original) !== null && i !== void 0 ? i : t, c = !!e.length;
  if (o != null && o.operated)
    for (; o.finalities.draft.length > 0; )
      o.finalities.draft.pop()(n, r);
  const u = c ? e[0] : o ? o.operated ? o.copy : o.original : t;
  return o && Te(o), s && re(u, u, o == null ? void 0 : o.options.updatedValues), [
    u,
    n && c ? [{ op: M.Replace, path: [], value: e[0] }] : n,
    r && c ? [{ op: M.Replace, path: [], value: a }] : r
  ];
}
function Tn(t, e) {
  var n;
  const r = {
    draft: [],
    revoke: [],
    handledSet: /* @__PURE__ */ new WeakSet()
  };
  let s, i;
  e.enablePatches && (s = [], i = []);
  const a = ((n = e.mark) === null || n === void 0 ? void 0 : n.call(e, t, U)) === U.mutable || !F(t, e) ? t : it({
    original: t,
    parentDraft: null,
    finalities: r,
    options: e
  });
  return [
    a,
    (c = []) => {
      const [u, f, l] = jn(a, c, s, i, e.enableAutoFreeze);
      return e.enablePatches ? [u, f, l] : u;
    }
  ];
}
function De(t) {
  const { rootDraft: e, value: n, useRawReturn: r = !1, isRoot: s = !0 } = t;
  rt(n, (i, o, a) => {
    const c = m(o);
    if (c && e && c.finalities === e.finalities) {
      t.isContainDraft = !0;
      const u = c.original;
      if (a instanceof Set) {
        const f = Array.from(a);
        a.clear(), f.forEach((l) => a.add(i === l ? u : l));
      } else
        le(a, i, u);
    } else typeof o == "object" && o !== null && (t.value = o, t.isRoot = !1, De(t));
  }), s && (t.isContainDraft || console.warn("The return value does not contain any draft, please use 'rawReturn()' to wrap the return value to improve performance."), r && console.warn("The return value contains drafts, please don't use 'rawReturn()' to wrap the return value."));
}
function Kt(t) {
  var e;
  const n = m(t);
  if (!F(t, n == null ? void 0 : n.options))
    return t;
  const r = te(t);
  if (n && !n.operated)
    return n.original;
  let s;
  function i() {
    s = r === 2 ? tt(t) ? new Map(t) : new (Object.getPrototypeOf(t)).constructor(t) : r === 3 ? Array.from(n.setMap.values()) : Wt(t, n == null ? void 0 : n.options);
  }
  if (n) {
    n.finalized = !0;
    try {
      i();
    } finally {
      n.finalized = !1;
    }
  } else
    s = t;
  if (rt(s, (o, a) => {
    if (n && K(H(n.original, o), a))
      return;
    const c = Kt(a);
    c !== a && (s === t && i(), le(s, o, c));
  }), r === 3) {
    const o = (e = n == null ? void 0 : n.original) !== null && e !== void 0 ? e : s;
    return et(o) ? new Set(s) : new (Object.getPrototypeOf(o)).constructor(s);
  }
  return s;
}
function St(t) {
  if (!ee(t))
    throw new Error(`current() is only used for Draft, parameter: ${t}`);
  return Kt(t);
}
const xn = (t) => function e(n, r, s) {
  var i, o, a;
  if (typeof n == "function" && typeof r != "function")
    return function(g, ...I) {
      return e(g, (j) => n.call(this, j, ...I), r);
    };
  const c = n, u = r;
  let f = s;
  if (typeof r != "function" && (f = r), f !== void 0 && Object.prototype.toString.call(f) !== "[object Object]")
    throw new Error(`Invalid options: ${f}, 'options' should be an object.`);
  f = Object.assign(Object.assign({}, t), f);
  const l = ee(c) ? St(c) : c, d = Array.isArray(f.mark) ? (g, I) => {
    for (const j of f.mark) {
      if (typeof j != "function")
        throw new Error(`Invalid mark: ${j}, 'mark' should be a function.`);
      const z = j(g, I);
      if (z)
        return z;
    }
  } : f.mark, h = (i = f.enablePatches) !== null && i !== void 0 ? i : !1, p = (o = f.strict) !== null && o !== void 0 ? o : !1, _ = {
    enableAutoFreeze: (a = f.enableAutoFreeze) !== null && a !== void 0 ? a : !1,
    mark: d,
    strict: p,
    enablePatches: h
  };
  if (!F(l, _) && typeof l == "object" && l !== null)
    throw new Error("Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.");
  const [w, S] = Tn(l, _);
  if (typeof r != "function") {
    if (!F(l, _))
      throw new Error("Invalid base state: create() only supports plain objects, arrays, Set, Map or using mark() to mark the state as immutable.");
    return [w, S];
  }
  let v;
  try {
    v = u(w);
  } catch (g) {
    throw Te(m(w)), g;
  }
  const D = (g) => {
    const I = m(w);
    if (!ee(g)) {
      if (g !== void 0 && !K(g, w) && (I != null && I.operated))
        throw new Error("Either the value is returned as a new non-draft value, or only the draft is modified without returning any value.");
      const z = g == null ? void 0 : g[On];
      if (z) {
        const Ae = z[0];
        return _.strict && typeof g == "object" && g !== null && De({
          rootDraft: I,
          value: g,
          useRawReturn: !0
        }), S([Ae]);
      }
      if (g !== void 0)
        return typeof g == "object" && g !== null && De({ rootDraft: I, value: g }), S([g]);
    }
    if (g === w || g === void 0)
      return S([]);
    const j = m(g);
    if (_ === j.options) {
      if (j.operated)
        throw new Error("Cannot return a modified child draft.");
      return S([St(g)]);
    }
    return S([g]);
  };
  return v instanceof Promise ? v.then(D, (g) => {
    throw Te(m(w)), g;
  }) : D(v);
}, Ne = xn();
Object.prototype.constructor.toString();
function Ht(t, e) {
  const n = Object.keys(t), r = Object.keys(e);
  return n.length === r.length && Object.keys(t).every((s) => e.hasOwnProperty(s));
}
function Ot(t, e) {
  return Object.keys(t).length === Object.keys(e).length && Object.keys(t).every(
    (n) => e.hasOwnProperty(n) && t[n] === e[n]
  );
}
function _e(t, e) {
  return typeof t != "object" || typeof e != "object" || t === null || e === null ? t === e : Ht(t, e) ? Object.keys(t).every(
    (n) => _e(t[n], e[n])
  ) : !1;
}
function Gt(t) {
  if (!ae(t))
    return t;
  const e = {};
  for (const [n, r] of Object.entries(t))
    r !== void 0 && (e[n] = r);
  return e;
}
function Yt(t, e) {
  if (!ae(t) || !ae(e))
    return e;
  const n = { ...t };
  for (const r of Object.keys(e)) {
    if (e[r] === void 0) continue;
    if (e[r] === null) {
      delete n[r];
      continue;
    }
    const s = ae(t[r]) && ae(e[r]);
    n[r] = s ? Yt(t[r], e[r]) : e[r];
  }
  return n;
}
function ae(t) {
  return typeof t == "object" && t !== null && !Array.isArray(t);
}
function $n(t, e, n) {
  if (!t || e.length === 0)
    return;
  let r = t || {};
  for (let i = 0; i < e.length - 1; i++) {
    const o = e[i];
    (!(o in r) || typeof r[o] != "object") && (r[o] = typeof e[i + 1] == "number" ? [] : {}), r = r[o];
  }
  const s = e[e.length - 1];
  Array.isArray(r) && typeof s == "number" ? r.splice(s, 0, n) : r[s] = n;
}
function vt(t, e, n) {
  if (!t || e.length === 0)
    return;
  let r = t || {};
  for (let s = 0; s < e.length - 1; s++) {
    const i = e[s];
    (!(i in r) || typeof r[i] != "object") && (r[i] = typeof e[s + 1] == "number" ? [] : {}), r = r[i];
  }
  r[e[e.length - 1]] = n;
}
function Xt(t, e) {
  if (!t || e.length === 0)
    return;
  const [n, ...r] = e;
  if (n in t) {
    if (r.length === 0) {
      Array.isArray(t) ? t.splice(n, 1) : delete t[n];
      return;
    }
    Xt(t[n], r), Un(t[n]) && delete t[n];
  }
}
function Un(t) {
  return t && Object.keys(t).length === 0;
}
function Dn(t) {
  return t.cardinality === "one";
}
function ot(t) {
  return t["value-type"] === "ref";
}
function at(t) {
  return t["value-type"] === "blob";
}
function Se(t, e) {
  return t[e];
}
function ct(t, e) {
  return e.reduce((n, r) => n && n.get(r), t);
}
function q(t, e) {
  if (e.length === 0) throw new Error("path must have at least one element");
  if (e.length === 1) {
    t.delete(e[0]);
    return;
  }
  const [n, ...r] = e;
  t.has(n) && q(t.get(n), r);
}
function R(t, e, n) {
  if (e.length === 0) throw new Error("path must have at least one element");
  if (e.length === 1) {
    t.set(e[0], n);
    return;
  }
  const [r, ...s] = e;
  let i = t.get(r);
  i || (i = /* @__PURE__ */ new Map(), t.set(r, i)), R(i, s, n);
}
function Zt(t, e) {
  const n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  for (const i of e) {
    const [o, a, c, u] = i, f = Se(t, a);
    if (!f) {
      console.warn("no such attr", o, t);
      continue;
    }
    ot(f) && R(s, [c, a, o], i), R(n, [o, a, c], i), R(r, [a, o, c], i);
  }
  return { eav: n, aev: r, vae: s };
}
function en(t) {
  const e = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
  for (const i of Object.values(t)) {
    const o = i["forward-identity"], [a, c, u] = o, f = i["reverse-identity"];
    if (R(r, [c, u], i), at(i) && R(e, [c, u], i), i["primary?"] && R(n, [c], i), f) {
      const [l, d, h] = f;
      R(s, [d, h], i);
    }
  }
  return { blobAttrs: e, primaryKeys: n, forwardIdents: r, revIdents: s };
}
function Nn(t) {
  return {
    __type: t.__type,
    attrs: t.attrs,
    triples: x(t.eav, 3),
    cardinalityInference: t.cardinalityInference,
    linkIndex: t.linkIndex
  };
}
function Ln(t) {
  return Le(
    t.attrs,
    t.triples,
    t.cardinalityInference,
    t.linkIndex
  );
}
function ut(t) {
  t.attrIndexes = en(t.attrs);
}
function Le(t, e, n, r) {
  const s = Zt(t, e);
  return s.attrs = t, s.attrIndexes = en(t), s.cardinalityInference = n, s.linkIndex = r, s.__type = "store", s;
}
function Oe(t, e) {
  var s, i;
  let n;
  if (Array.isArray(e[0])) {
    const [o, a] = e[0], c = t.aev.get(o);
    if (!c)
      return null;
    n = (s = x(c, 2).find((f) => f[2] === a)) == null ? void 0 : s[0];
  } else
    n = e[0];
  if (!n)
    return null;
  const r = e[2];
  if (Array.isArray(r) && r.length === 2 && t.aev.get(r[0])) {
    const [o, a] = r, c = t.aev.get(o);
    if (!c)
      return null;
    const f = (i = x(c, 2).find((b) => b[2] === a)) == null ? void 0 : i[0];
    if (!f)
      return null;
    const [l, d, h, ...p] = e;
    return [n, d, f, ...p];
  } else {
    const [o, ...a] = e;
    return [n, ...a];
  }
}
function qn(t, e) {
  const n = Oe(t, e);
  if (!n)
    return;
  const [r, s, i] = n, o = Se(t.attrs, s);
  o && (q(t.eav, [r, s, i]), q(t.aev, [s, r, i]), ot(o) && q(t.vae, [i, s, r]));
}
let Fn = 0;
function tn(t, e, n) {
  const [r, s, i] = n;
  let o;
  const a = ct(t.ea, [r, s, i]);
  return a && (o = a[3]), o || Date.now() * 10 + Fn++;
}
function zn(t, e) {
  const n = Oe(t, e);
  if (!n)
    return;
  const [r, s, i] = n, o = Se(t.attrs, s);
  if (!o)
    return;
  const a = ct(t.eav, [r, s, i]), c = (a == null ? void 0 : a[3]) ?? tn(t, o, n), u = [r, s, i, c];
  Dn(o) ? (R(t.eav, [r, s], /* @__PURE__ */ new Map([[i, u]])), R(t.aev, [s, r], /* @__PURE__ */ new Map([[i, u]]))) : (R(t.eav, [r, s, i], u), R(t.aev, [s, r, i], u)), ot(o) && R(t.vae, [i, s, r], u);
}
function Vn(t, e) {
  var d;
  const n = Oe(t, e);
  if (!n)
    return;
  const [r, s, i] = n, o = Se(t.attrs, s);
  if (!o) return;
  if (!at(o))
    throw new Error("merge operation is not supported for links");
  const a = ct(t.eav, [r, s]);
  if (!a) return;
  const c = (d = a.values().next()) == null ? void 0 : d.value;
  if (!c) return;
  const u = c[2], f = Yt(u, i), l = [
    r,
    s,
    f,
    tn(t, o, c)
  ];
  R(t.eav, [r, s], /* @__PURE__ */ new Map([[f, l]]));
}
function qe(t, e) {
  var c, u;
  const [n, r] = e, s = Oe(t, [n]);
  if (!s)
    return;
  const [i] = s, o = t.eav.get(i);
  if (o) {
    for (const f of o.keys()) {
      const l = t.attrs[f];
      l && l["on-delete-reverse"] === "cascade" && x(o.get(f), 1).forEach(
        ([d, h, p]) => {
          var b;
          return qe(t, [p, (b = l["reverse-identity"]) == null ? void 0 : b[1]]);
        }
      ), // Fall back to deleting everything if we've rehydrated tx-steps from
      // the store that didn't set `etype` in deleteEntity
      (!r || // If we don't know about the attr, let's just get rid of it
      !l || // Make sure it matches the etype
      ((c = l["forward-identity"]) == null ? void 0 : c[1]) === r) && (q(t.aev, [f, i]), q(t.eav, [i, f]));
    }
    o.size === 0 && q(t.eav, [i]);
  }
  const a = t.vae.get(i) && x(t.vae.get(i), 2);
  a && a.forEach((f) => {
    var b, _;
    const [l, d, h] = f, p = t.attrs[d];
    (!r || !p || ((b = p["reverse-identity"]) == null ? void 0 : b[1]) === r) && (q(t.eav, [l, d, h]), q(t.aev, [d, l, h]), q(t.vae, [h, d, l])), p && p["on-delete"] === "cascade" && qe(t, [l, (_ = p["forward-identity"]) == null ? void 0 : _[1]]);
  }), ((u = t.vae.get(i)) == null ? void 0 : u.size) === 0 && q(t.vae, [i]);
}
function nn(t, e) {
  const n = Zt(t.attrs, e);
  Object.keys(n).forEach((r) => {
    t[r] = n[r];
  });
}
function Wn(t, [e]) {
  t.attrs[e.id] = e, ut(t);
}
function rn(t) {
  return x(t.eav, 3);
}
function Qn(t, [e]) {
  if (!t.attrs[e]) return;
  const n = rn(t).filter(([r, s]) => s !== e);
  delete t.attrs[e], ut(t), nn(t, n);
}
function Jn(t, [e]) {
  const n = t.attrs[e.id];
  n && (t.attrs[e.id] = { ...n, ...e }, ut(t), nn(t, rn(t)));
}
function Bn(t, e) {
  const [n, ...r] = e;
  switch (n) {
    case "add-triple":
      zn(t, r);
      break;
    case "deep-merge-triple":
      Vn(t, r);
      break;
    case "retract-triple":
      qn(t, r);
      break;
    case "delete-entity":
      qe(t, r);
      break;
    case "add-attr":
      Wn(t, r);
      break;
    case "delete-attr":
      Qn(t, r);
      break;
    case "update-attr":
      Jn(t, r);
      break;
    case "rule-params":
      break;
    default:
      throw new Error(`unhandled transaction action: ${n}`);
  }
}
function x(t, e, n = []) {
  if (!t || e === 0)
    return n;
  if (e === 1) {
    for (const r of t.values())
      n.push(r);
    return n;
  }
  for (const r of t.values())
    x(r, e - 1, n);
  return n;
}
function de(t, e, n) {
  var i, o;
  const r = [];
  if (n != null && n.hasOwnProperty("$not")) {
    for (const a of e.keys())
      n.$not !== a && r.push(e.get(a));
    return r;
  }
  if (n != null && n.hasOwnProperty("$isNull")) {
    const { attrId: a, isNull: c, reverse: u } = n.$isNull;
    if (u)
      for (const f of e.keys()) {
        const l = t.vae.get(f), d = !l || ((i = l.get(a)) == null ? void 0 : i.get(null)) || !l.get(a);
        (c ? d : !d) && r.push(e.get(f));
      }
    else {
      const f = t.aev.get(a);
      for (const l of e.keys()) {
        const d = !f || ((o = f.get(l)) == null ? void 0 : o.get(null)) || !f.get(l);
        (c ? d : !d) && r.push(e.get(l));
      }
    }
    return r;
  }
  if (n != null && n.$comparator)
    return x(e, 1).filter(n.$op);
  const s = n.in || n.$in || [n];
  for (const a of s) {
    const c = e.get(a);
    c && r.push(c);
  }
  return r;
}
function Kn(t, e, n) {
  let r = "";
  return t !== void 0 && (r += "e"), e !== void 0 && (r += "a"), n !== void 0 && (r += "v"), r;
}
function Hn(t, [e, n, r]) {
  var i, o;
  switch (Kn(e, n, r)) {
    case "e": {
      const a = t.eav.get(e);
      return x(a, 2);
    }
    case "ea": {
      const a = (i = t.eav.get(e)) == null ? void 0 : i.get(n);
      return x(a, 1);
    }
    case "eav": {
      const a = (o = t.eav.get(e)) == null ? void 0 : o.get(n);
      return a ? de(t, a, r) : [];
    }
    case "ev": {
      const a = t.eav.get(e);
      if (!a)
        return [];
      const c = [];
      for (const u of a.values())
        c.push(...de(t, u, r));
      return c;
    }
    case "a": {
      const a = t.aev.get(n);
      return x(a, 2);
    }
    case "av": {
      const a = t.aev.get(n);
      if (!a)
        return [];
      const c = [];
      for (const u of a.values())
        c.push(...de(t, u, r));
      return c;
    }
    case "v": {
      const a = [];
      for (const c of t.eav.values())
        for (const u of c.values())
          a.push(...de(t, u, r));
    }
    default:
      return x(t.eav, 3);
  }
}
function Gn(t, e, n) {
  var s;
  const r = {};
  for (const [i, o] of e.entries()) {
    const a = (s = t.eav.get(n)) == null ? void 0 : s.get(o.id), c = x(a, 1);
    for (const u of c)
      r[i] = u[2];
  }
  return r;
}
function se(t, e, n) {
  var r;
  return (r = t.attrIndexes.forwardIdents.get(e)) == null ? void 0 : r.get(n);
}
function sn(t, e, n) {
  var r;
  return (r = t.attrIndexes.revIdents.get(e)) == null ? void 0 : r.get(n);
}
function Yn(t, e) {
  return t.attrIndexes.blobAttrs.get(e);
}
function Xn(t, e) {
  var r;
  const n = t.attrIndexes.primaryKeys.get(e);
  return n || ((r = t.attrIndexes.forwardIdents.get(e)) == null ? void 0 : r.get("id"));
}
function Mt(t, e) {
  return Ne(t, (n) => {
    e.forEach((r) => {
      Bn(n, r);
    });
  });
}
function Zn(t) {
  return typeof t == "string" && t.startsWith("?");
}
function er(t, e, n) {
  if (n.hasOwnProperty(t)) {
    const r = n[t];
    return on(r, e, n);
  }
  return { ...n, [t]: e };
}
function Pt(t, e, n) {
  return t === e ? n : null;
}
function tr(t) {
  switch (typeof t) {
    case "string":
      return t.startsWith("?") ? er : Pt;
    default:
      return Pt;
  }
}
const nr = [
  "in",
  "$in",
  "$not",
  "$isNull",
  "$comparator"
  // covers all of $gt, $lt, etc.
];
function rr(t) {
  for (const e of nr)
    if (t.hasOwnProperty(e))
      return !0;
  return !1;
}
function on(t, e, n) {
  return n ? typeof t == "object" ? rr(t) ? n : null : tr(t)(t, e, n) : null;
}
function sr(t, e, n) {
  return t.reduce((r, s, i) => {
    const o = e[i];
    return on(s, o, r);
  }, n);
}
function ir(t, e, n) {
  return cr(t, e, n).map((r) => sr(e, r, n)).filter((r) => r);
}
function or(t, e, n) {
  return e.or ? e.or.patterns.flatMap((r) => Fe(t, r, n)) : e.and ? e.and.patterns.reduce((r, s) => Fe(t, s, r), n) : n.flatMap((r) => ir(t, e, r));
}
function Fe(t, e, n = [{}]) {
  return e.reduce((r, s) => or(t, s, r), n);
}
function ft(t, e) {
  return Array.isArray(e) ? e.map((n) => ft(t, n)) : Zn(e) ? t[e] : e;
}
function ar(t, { find: e, where: n }) {
  return Fe(t, n).map((s) => ft(s, e));
}
function cr(t, e, n) {
  return Hn(t, ft(n, e));
}
let he;
const ur = new Uint8Array(16);
function fr() {
  if (!he && (he = typeof crypto < "u" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !he))
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  return he(ur);
}
const A = [];
for (let t = 0; t < 256; ++t)
  A.push((t + 256).toString(16).slice(1));
function lr(t, e = 0) {
  return A[t[e + 0]] + A[t[e + 1]] + A[t[e + 2]] + A[t[e + 3]] + "-" + A[t[e + 4]] + A[t[e + 5]] + "-" + A[t[e + 6]] + A[t[e + 7]] + "-" + A[t[e + 8]] + A[t[e + 9]] + "-" + A[t[e + 10]] + A[t[e + 11]] + A[t[e + 12]] + A[t[e + 13]] + A[t[e + 14]] + A[t[e + 15]];
}
const dr = typeof crypto < "u" && crypto.randomUUID && crypto.randomUUID.bind(crypto), At = {
  randomUUID: dr
};
function hr(t, e, n) {
  if (At.randomUUID && !t)
    return At.randomUUID();
  t = t || {};
  const r = t.random || (t.rng || fr)();
  return r[6] = r[6] & 15 | 64, r[8] = r[8] & 63 | 128, lr(r);
}
function Ct(t) {
  const e = t.replace(/-/g, ""), n = [];
  for (let r = 0; r < e.length; r += 2)
    n.push(parseInt(e.substring(r, r + 2), 16));
  return n;
}
function pr(t, e) {
  for (let n = 0; n < t.length; n++) {
    if (t[n] < e[n]) return -1;
    if (t[n] > e[n]) return 1;
  }
  return 0;
}
function yr(t, e) {
  return pr(Ct(t), Ct(e));
}
function C() {
  return hr();
}
let br = 0;
function ue(t) {
  return ve(`_${t}`, br++);
}
function ve(t, e) {
  return `?${t}-${e}`;
}
class ie extends Error {
  constructor(e) {
    super(e), this.name = "AttrNotFoundError";
  }
}
function _r(t, e) {
  const n = Xn(t, e);
  if (!n)
    throw new ie(`Could not find id attr for ${e}`);
  return n;
}
function kt(t, e, n, r) {
  return [wr(t, e, n, r)];
}
function wr(t, e, n, r) {
  return [
    t(n, r),
    _r(e, n).id,
    t(n, r),
    t("time", r)
  ];
}
function gr(t, e, n) {
  return t.map((r) => r === e ? n : r);
}
function an(t, e, n, r, s) {
  const i = se(e, n, s), o = sn(e, n, s), a = i || o;
  if (!a)
    throw new ie(`Could not find attr for ${[n, s]}`);
  if (a["value-type"] !== "ref")
    throw new Error(`Attr ${a.id} is not a ref`);
  const [c, u] = a["forward-identity"], [f, l] = a["reverse-identity"], d = r + 1, h = i ? [
    t(u, r),
    a.id,
    t(l, d),
    ue("time")
  ] : [
    t(u, d),
    a.id,
    t(l, r),
    ue("time")
  ];
  return [i ? l : u, d, h, a, !!i];
}
function Et(t, e) {
  if (typeof e != "string")
    return function(o) {
      return !1;
    };
  const r = e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/%/g, ".*").replace(/_/g, "."), s = new RegExp(
    `^${r}$`,
    t ? void 0 : "i"
  );
  return function(o) {
    return typeof o != "string" ? !1 : s.test(o);
  };
}
function mr(t, e) {
  if (typeof e != "object" || e.hasOwnProperty("$in") || e.hasOwnProperty("in"))
    return e;
  const n = t["checked-data-type"] === "date";
  if (e.hasOwnProperty("$gt"))
    return {
      $comparator: !0,
      $op: n ? function(s) {
        return new Date(s[2]) > new Date(e.$gt);
      } : function(s) {
        return s[2] > e.$gt;
      }
    };
  if (e.hasOwnProperty("$gte"))
    return {
      $comparator: !0,
      $op: n ? function(s) {
        return new Date(s[2]) >= new Date(e.$gte);
      } : function(s) {
        return s[2] >= e.$gte;
      }
    };
  if (e.hasOwnProperty("$lt"))
    return {
      $comparator: !0,
      $op: n ? function(s) {
        return new Date(s[2]) < new Date(e.$lt);
      } : function(s) {
        return s[2] < e.$lt;
      }
    };
  if (e.hasOwnProperty("$lte"))
    return {
      $comparator: !0,
      $op: n ? function(s) {
        return new Date(s[2]) <= new Date(e.$lte);
      } : function(s) {
        return s[2] <= e.$lte;
      }
    };
  if (e.hasOwnProperty("$like")) {
    const r = Et(!0, e.$like);
    return {
      $comparator: !0,
      $op: function(i) {
        return r(i[2]);
      }
    };
  }
  if (e.hasOwnProperty("$ilike")) {
    const r = Et(!1, e.$ilike);
    return {
      $comparator: !0,
      $op: function(i) {
        return r(i[2]);
      }
    };
  }
  return e;
}
function Sr(t, e, n, r, s, i) {
  const o = se(e, n, s), a = sn(e, n, s), c = o || a;
  if (!c)
    throw new ie(
      `No attr for etype = ${n} label = ${s}`
    );
  if (i != null && i.hasOwnProperty("$isNull")) {
    const u = se(e, n, "id");
    if (!u)
      throw new ie(
        `No attr for etype = ${n} label = id`
      );
    return [
      t(n, r),
      u.id,
      { $isNull: { attrId: c.id, isNull: i.$isNull, reverse: !o } },
      ue("time")
    ];
  }
  return o ? [
    t(n, r),
    c.id,
    mr(c, i),
    ue("time")
  ] : [i, c.id, t(n, r), ue("time")];
}
function Or(t, e, n, r, s) {
  const [i, o, a] = s.reduce(
    (c, u) => {
      const [f, l, d] = c, [h, p, b] = an(
        t,
        e,
        f,
        l,
        u
      );
      return [h, p, [...d, b]];
    },
    [n, r, []]
  );
  return [i, o, a];
}
function ze(t, e, n, r, s, i) {
  const o = s.slice(0, s.length - 1), a = s[s.length - 1], [c, u, f] = Or(
    t,
    e,
    n,
    r,
    o
  ), l = Sr(
    t,
    e,
    c,
    u,
    a,
    i
  );
  return f.concat([l]);
}
function vr(t, e) {
  return e ? [e].concat(t) : t;
}
function Mr([t, e]) {
  return t === "or" && Array.isArray(e);
}
function Pr([t, e]) {
  return t === "and" && Array.isArray(e);
}
function Ar(t, e, n) {
  return (r, s) => {
    const i = t(r, s);
    return e == i ? i : `${i}-${n}`;
  };
}
function It(t, e, n, r, s, i) {
  const o = t(r, s), a = i.map((c, u) => {
    const f = Ar(t, o, u);
    return cn(f, n, r, s, c);
  });
  return { [e]: { patterns: a, joinSym: o } };
}
function Cr(t) {
  const e = [];
  for (let n = 1; n <= t.length; n++)
    e.push(t.slice(0, n));
  return e;
}
function Rt(t, e, n, r, s) {
  return Cr(s).map(
    (i) => ze(t, e, n, r, i, { $isNull: !0 })
  );
}
function cn(t, e, n, r, s) {
  return Object.entries(s).flatMap(([i, o]) => {
    if (Mr([i, o]))
      return It(t, "or", e, n, r, o);
    if (Pr([i, o]))
      return It(t, "and", e, n, r, o);
    if (i === "$entityIdStartsWith")
      return [];
    const a = i.split(".");
    if (o != null && o.hasOwnProperty("$not")) {
      const c = ze(t, e, n, r, a, o), u = Rt(
        t,
        e,
        n,
        r,
        a
      );
      return [
        {
          or: {
            patterns: [c, ...u],
            joinSym: t(n, r)
          }
        }
      ];
    }
    return o != null && o.hasOwnProperty("$isNull") && o.$isNull === !0 && a.length > 1 ? [
      {
        or: {
          patterns: Rt(
            t,
            e,
            n,
            r,
            a
          ),
          joinSym: t(n, r)
        }
      }
    ] : ze(t, e, n, r, a, o);
  });
}
function kr(t, e, n, r) {
  const s = ve;
  return r ? cn(s, t, e, n, r).concat(kt(s, t, e, n)) : kt(s, t, e, n);
}
function Er(t, e, n) {
  return [t(e, n), t("time", n)];
}
function Ir(t, e, n, r, s, i) {
  const [o, a, c, u, f] = an(
    t,
    e,
    n,
    r,
    s
  ), l = gr(c, t(n, r), i);
  return [o, a, l, u, f];
}
function Rr(t, e, { etype: n, level: r, form: s }, i) {
  const o = Object.keys(s).filter((a) => a !== "$");
  return o.length ? Object.entries(i).map(function([c, u]) {
    return o.map(function(d) {
      var p, b, _;
      const h = !!(e.cardinalityInference && ((_ = (b = (p = e.linkIndex) == null ? void 0 : p[n]) == null ? void 0 : b[d]) != null && _.isSingular));
      try {
        const [w, S, v] = Ir(
          t,
          e,
          n,
          r,
          d,
          c
        ), D = un(e, {
          etype: w,
          level: S,
          form: s[d],
          join: v
        }), g = h ? D[0] : D;
        return { [d]: g };
      } catch (w) {
        if (w instanceof ie)
          return { [d]: h ? void 0 : [] };
        throw w;
      }
    }).reduce(function(d, h) {
      return { ...d, ...h };
    }, u);
  }) : Object.values(i);
}
function me([t, e], [n, r]) {
  return e === r || e == null && r == null ? yr(t, n) : r == null ? 1 : e == null ? -1 : e > r ? 1 : -1;
}
function Ve(t) {
  return t == null ? t : new Date(t).getTime();
}
function jr(t, e, n, r) {
  var h;
  const [s, i, o, a] = t, c = n === "desc" ? 1 : -1;
  if (((h = e["forward-identity"]) == null ? void 0 : h[2]) === "id")
    return me(r, [s, a]) === c;
  const [u, f] = r, l = e["checked-data-type"] === "date" ? Ve(f) : f, d = e["checked-data-type"] === "date" ? Ve(o) : o;
  return me([u, l], [s, d]) === c;
}
function Tr(t, e) {
  const n = e[1];
  return t.attrs[n];
}
function xr(t, e, n) {
  const r = Object.keys(n)[0];
  return se(t, e, r);
}
function $r(t, e, n, r) {
  if (n)
    return Tr(t, n);
  if (r)
    return xr(t, e, r);
}
function Ur(t, e, n) {
  var s, i;
  if (!Array.isArray(n.fields))
    return Yn(t, e);
  const r = /* @__PURE__ */ new Map();
  for (const o of n.fields) {
    const a = se(t, e, o), c = (s = a == null ? void 0 : a["forward-identity"]) == null ? void 0 : s[2];
    c && at(a) && r.set(c, a);
  }
  if (!r.has("id")) {
    const o = se(t, e, "id"), a = (i = o == null ? void 0 : o["forward-identity"]) == null ? void 0 : i[2];
    a && r.set(a, o);
  }
  return r;
}
function Dr(t, e, n, r, s, i) {
  var l;
  let o = ar(t, i);
  const a = r == null ? void 0 : r["start-cursor"], c = $r(t, e, a, s);
  if (c && ((l = c == null ? void 0 : c["forward-identity"]) == null ? void 0 : l[2]) !== "id") {
    const d = c["checked-data-type"] === "date", h = c.id;
    o = o.map(([p]) => {
      var _, w, S, v, D;
      let b = (D = (v = (S = (w = (_ = t.eav.get(p)) == null ? void 0 : _.get(h)) == null ? void 0 : w.values()) == null ? void 0 : S.next()) == null ? void 0 : v.value) == null ? void 0 : D[2];
      return d && (b = Ve(b)), [p, b];
    });
  }
  o.sort(
    n === "asc" ? function(h, p) {
      return me(h, p);
    } : function(h, p) {
      return me(p, h);
    }
  );
  let u = {};
  const f = Ur(t, e, i);
  for (const d of o) {
    const [h] = d;
    if (u[h] || a && c && jr(a, c, n, d))
      continue;
    const p = Gn(t, f, h);
    p && (u[h] = p);
  }
  return u;
}
function Nr(t) {
  var n;
  const e = (n = t.$) == null ? void 0 : n.order;
  return e && e[Object.keys(e)[0]] || "asc";
}
function Lr(t, { etype: e, level: n, form: r, join: s, pageInfo: i }) {
  var b, _, w, S, v, D, g, I, j;
  const o = ((b = r.$) == null ? void 0 : b.limit) || ((_ = r.$) == null ? void 0 : _.first) || ((w = r.$) == null ? void 0 : w.last), a = (S = r.$) == null ? void 0 : S.offset, c = (v = r.$) == null ? void 0 : v.before, u = (D = r.$) == null ? void 0 : D.after, f = (g = r.$) == null ? void 0 : g.order, l = (I = r.$) == null ? void 0 : I.fields;
  if ((a || c || u) && (!i || !i["start-cursor"]))
    return [];
  const d = vr(kr(t, e, n, (j = r.$) == null ? void 0 : j.where), s), h = Er(ve, e, n), p = Dr(
    t,
    e,
    Nr(r),
    i,
    f,
    { where: d, find: h, fields: l }
  );
  if (o != null) {
    const z = Object.entries(p);
    return z.length <= o ? p : Object.fromEntries(z.slice(0, o));
  }
  return p;
}
function qr(t, e) {
  try {
    return Lr(t, e);
  } catch (n) {
    if (n instanceof ie)
      return {};
    throw n;
  }
}
function un(t, e) {
  const n = qr(t, e);
  return Rr(ve, t, e, n);
}
function Fr(t) {
  const e = {};
  for (const [n, r] of Object.entries(t))
    e[n] = {
      startCursor: r["start-cursor"],
      endCursor: r["end-cursor"],
      hasNextPage: r["has-next-page?"],
      hasPreviousPage: r["has-previous-page?"]
    };
  return e;
}
function zr({ store: t, pageInfo: e, aggregate: n }, r) {
  const i = { data: Object.keys(r).reduce(function(a, c) {
    return n != null && n[c] || c === "$$ruleParams" || (a[c] = un(t, {
      etype: c,
      form: r[c],
      level: 0,
      pageInfo: e == null ? void 0 : e[c]
    })), a;
  }, {}) };
  return e && (i.pageInfo = Fr(e)), n && (i.aggregate = n), i;
}
function Vr() {
  const e = {
    __ops: 1,
    update: 1,
    link: 1,
    unlink: 1,
    delete: 1,
    merge: 1,
    ruleParams: 1
  };
  return new Set(Object.keys(e));
}
const Wr = Vr();
function We(t, e, n) {
  return new Proxy({}, {
    get: (r, s) => {
      if (s === "__ops") return n;
      if (Wr.has(s))
        return (i) => We(t, e, [
          ...n,
          [s, t, e, i]
        ]);
    }
  });
}
function ci(t, e) {
  return `lookup__${t}__${JSON.stringify(e)}`;
}
function Qe(t) {
  return t.startsWith("lookup__");
}
function fn(t) {
  const [e, n, ...r] = t.split("__");
  return [n, JSON.parse(r.join("__"))];
}
function Qr(t) {
  return new Proxy(
    {},
    {
      get(e, n) {
        return Qe(n) ? We(t, fn(n), []) : We(t, n, []);
      }
    }
  );
}
function ln() {
  return new Proxy(
    {},
    {
      get(t, e) {
        return Qr(e);
      }
    }
  );
}
const ui = ln();
function Jr(t) {
  return t.__ops;
}
function Br(t, e) {
  const { attrIdMap: n, refSwapAttrIds: r } = t, s = [];
  for (const o of e) {
    const a = n[o];
    if (a)
      s.push(a);
    else if (Array.isArray(o) && o.length == 2 && n[o[0]]) {
      const [c, u] = o;
      s.push([n[c], u]);
    } else
      s.push(o);
  }
  const [i] = e;
  if ((i === "add-triple" || i === "retract-triple") && r.has(e[2])) {
    const o = s[1];
    s[1] = s[3], s[3] = o;
  }
  return s;
}
function E(t, e, n) {
  return Object.values(t).find((r) => {
    const [s, i, o] = r["forward-identity"];
    return i === e && o === n;
  });
}
function Z(t, e, n) {
  return Object.values(t).find((r) => {
    const s = r["reverse-identity"];
    if (!s) return !1;
    const [i, o, a] = s;
    return o === e && a === n;
  });
}
function Kr(t) {
  if (Array.isArray(t))
    return t;
  const e = Object.entries(t);
  if (e.length !== 1)
    throw new Error(
      "lookup must be an object with a single unique attr and value."
    );
  return e[0];
}
function Je(t, e, n) {
  return n.indexOf(".") !== -1 && // attr names can have `.` in them, so use the attr we find with a `.`
  // before assuming it's a ref lookup.
  !E(t, e, n);
}
function Be(t) {
  const [e, n, ...r] = t.split(".");
  if (r.length > 0 || n !== "id")
    throw new Error(`${t} is not a valid lookup attribute.`);
  return e;
}
function Hr(t, e, n) {
  if (!Je(t, e, n))
    return E(t, e, n);
  const r = Be(n), s = E(t, e, r) || Z(t, e, r);
  if (s && s["value-type"] !== "ref")
    throw new Error(`${n} does not reference a valid link attribute.`);
  return s;
}
function Ke(t) {
  return typeof t == "string" && !Qe(t) ? null : typeof t == "string" && Qe(t) ? fn(t) : Kr(t);
}
function $(t, e, n) {
  const r = Ke(n);
  if (r === null)
    return n;
  const [s, i] = r, o = Hr(t, e, s);
  if (!o || !o["unique?"])
    throw new Error(`${s} is not a unique attribute.`);
  return [o.id, i];
}
function dn(t, e, n, r) {
  const s = $(t, e, n);
  return Array.isArray(s) ? [[
    "add-triple",
    s,
    E(t, e, "id").id,
    s
  ]].concat(r) : r;
}
function Gr(t, [e, n, r]) {
  const s = Object.entries(r).flatMap(([i, o]) => {
    const a = Array.isArray(o) ? o : [o], c = E(t, e, i), u = Z(t, e, i);
    return a.map((f) => c ? [
      "add-triple",
      $(t, e, n),
      c.id,
      $(t, c["reverse-identity"][1], f)
    ] : [
      "add-triple",
      $(t, u["forward-identity"][1], f),
      u.id,
      $(t, e, n)
    ]);
  });
  return dn(t, e, n, s);
}
function Yr(t, [e, n, r]) {
  const s = Object.entries(r).flatMap(([i, o]) => {
    const a = Array.isArray(o) ? o : [o], c = E(t, e, i), u = Z(t, e, i);
    return a.map((f) => c ? [
      "retract-triple",
      $(t, e, n),
      c.id,
      $(t, c["reverse-identity"][1], f)
    ] : [
      "retract-triple",
      $(t, u["forward-identity"][1], f),
      u.id,
      $(t, e, n)
    ]);
  });
  return dn(t, e, n, s);
}
function Xr(t, [e, n, r]) {
  const s = Gt(r), i = $(t, e, n);
  return [["id", i]].concat(Object.entries(s)).map(([a, c]) => {
    const u = E(t, e, a);
    return ["add-triple", i, u.id, c];
  });
}
function Zr(t, [e, n]) {
  return [["delete-entity", $(t, e, n), e]];
}
function es(t, [e, n, r]) {
  const s = Gt(r), i = $(t, e, n), o = Object.entries(s).map(([c, u]) => {
    const f = E(t, e, c);
    return ["deep-merge-triple", i, f.id, u];
  });
  return [[
    "add-triple",
    i,
    E(t, e, "id").id,
    i
  ]].concat(o);
}
function ts(t, [e, n, r]) {
  return [["rule-params", $(t, e, n), e, r]];
}
function ns(t) {
  const [e, n, r, s] = t;
  if (!s)
    return t;
  const i = { ...s };
  return delete i.id, [e, n, r, i];
}
function rs(t, e) {
  const [n, ...r] = ns(e);
  switch (n) {
    case "merge":
      return es(t, r);
    case "update":
      return Xr(t, r);
    case "link":
      return Gr(t, r);
    case "unlink":
      return Yr(t, r);
    case "delete":
      return Zr(t, r);
    case "ruleParams":
      return ts(t, r);
    default:
      throw new Error(`unsupported action ${n}`);
  }
}
function ss(t) {
  switch (t) {
    case "string":
    case "date":
    case "boolean":
    case "number":
      return t;
    default:
      return;
  }
}
function is(t, e, n) {
  var a, c;
  const r = (c = (a = t.entities[e]) == null ? void 0 : a.attrs) == null ? void 0 : c[n];
  if (n === "id") return null;
  if (!r)
    throw new Error(`${e}.${n} does not exist in your schema`);
  const { unique: s, indexed: i } = r == null ? void 0 : r.config, o = ss(r == null ? void 0 : r.valueType);
  return {
    "index?": i,
    "unique?": s,
    "checked-data-type": o
  };
}
function Ie(t, e, n, r) {
  const s = t ? is(t, e, n) : null, i = C(), a = [C(), e, n];
  return {
    id: i,
    "forward-identity": a,
    "value-type": "blob",
    cardinality: "one",
    "unique?": !1,
    "index?": !1,
    isUnsynced: !0,
    ...s || {},
    ...r || {}
  };
}
function os(t, e, n) {
  return Object.values(t.links).find((s) => s.forward.on === e && s.forward.label === n || s.reverse.on === e && s.reverse.label === n);
}
function as(t, e, n) {
  const r = os(t, e, n);
  if (!r)
    throw new Error(`Couldn't find the link ${e}.${n} in your schema`);
  const { forward: s, reverse: i } = r;
  return {
    "forward-identity": [C(), s.on, s.label],
    "reverse-identity": [C(), i.on, i.label],
    cardinality: s.has === "one" ? "one" : "many",
    "unique?": i.has === "one"
  };
}
function jt(t, e, n, r) {
  const s = t ? as(t, e, n) : null, i = C(), o = [C(), e, n], a = [C(), n, e];
  return {
    id: i,
    "forward-identity": o,
    "reverse-identity": a,
    "value-type": "ref",
    cardinality: "many",
    "unique?": !1,
    "index?": !1,
    isUnsynced: !0,
    ...s || {},
    ...r || {}
  };
}
const cs = /* @__PURE__ */ new Set(["update", "merge", "link", "unlink"]), us = /* @__PURE__ */ new Set(["link", "unlink"]), fs = /* @__PURE__ */ new Set(["update", "merge"]), ls = /* @__PURE__ */ new Set([
  "link",
  "unlink",
  "update",
  "merge",
  "delete",
  "ruleParams"
]), He = { "unique?": !0, "index?": !0 }, ds = { ...He, cardinality: "one" };
function hs(t) {
  const e = [], [n, r, s, i] = t;
  if (!ls.has(n))
    return e;
  const o = Ke(s);
  if (o && e.push({ etype: r, lookupPair: o }), n === "link")
    for (const [a, c] of Object.entries(i)) {
      const u = Array.isArray(c) ? c : [c];
      for (const f of u) {
        const l = Ke(f);
        l && e.push({
          etype: r,
          lookupPair: l,
          linkLabel: a
        });
      }
    }
  return e;
}
function ps({ attrs: t, schema: e }, n) {
  var u, f;
  const [r, s, i] = [/* @__PURE__ */ new Set(), { ...t }, []];
  function o(l) {
    s[l.id] = l, i.push(["add-attr", l]), r.add(l.id);
  }
  function a(l) {
    l != null && l.isUnsynced && !r.has(l.id) && (i.push(["add-attr", l]), r.add(l.id));
  }
  function c(l, d) {
    const h = E(s, l, d), p = Z(s, l, d);
    a(h), a(p), !h && !p && o(jt(e, l, d, ds));
  }
  for (const l of n)
    for (const { etype: d, lookupPair: h, linkLabel: p } of hs(l)) {
      const b = h[0];
      if (p) {
        c(d, p);
        const _ = E(s, d, p), w = Z(s, d, p);
        a(_), a(w);
        const S = ((u = _ == null ? void 0 : _["reverse-identity"]) == null ? void 0 : u[1]) || ((f = w == null ? void 0 : w["forward-identity"]) == null ? void 0 : f[1]) || p;
        if (Je(s, S, b))
          c(S, Be(b));
        else {
          const v = E(s, S, b);
          v || o(
            Ie(e, S, b, He)
          ), a(v);
        }
      } else if (Je(s, d, b))
        c(d, Be(b));
      else {
        const _ = E(s, d, b);
        _ || o(Ie(e, d, b, He)), a(_);
      }
    }
  for (const l of n) {
    const [d, h, p, b] = l;
    if (cs.has(d)) {
      const _ = Object.keys(b);
      _.push("id");
      for (const w of _) {
        const S = E(s, h, w);
        if (a(S), fs.has(d) && (S || o(
          Ie(
            e,
            h,
            w,
            w === "id" ? { "unique?": !0 } : null
          )
        )), us.has(d)) {
          const v = Z(s, h, w);
          !S && !v && o(jt(e, h, w)), a(v);
        }
      }
    }
  }
  return [s, i];
}
function ys(t, e) {
  const r = (Array.isArray(e) ? e : [e]).flatMap((a) => Jr(a)), [s, i] = ps(t, r), o = r.flatMap((a) => rs(s, a));
  return [...i, ...o];
}
class hn {
  constructor(e) {
    this.dbName = e, this._storeName = "kv", this._dbPromise = this._init();
  }
  _init() {
    return new Promise((e, n) => {
      const r = indexedDB.open(this.dbName, 1);
      r.onerror = (s) => {
        n(s);
      }, r.onsuccess = (s) => {
        e(s.target.result);
      }, r.onupgradeneeded = (s) => {
        s.target.result.createObjectStore(this._storeName);
      };
    });
  }
  async getItem(e) {
    const n = await this._dbPromise;
    return new Promise((r, s) => {
      const a = n.transaction([this._storeName], "readonly").objectStore(this._storeName).get(e);
      a.onerror = (c) => {
        s(c);
      }, a.onsuccess = (c) => {
        a.result ? r(a.result) : r(null);
      };
    });
  }
  async setItem(e, n) {
    const r = await this._dbPromise;
    return new Promise((s, i) => {
      const c = r.transaction([this._storeName], "readwrite").objectStore(this._storeName).put(n, e);
      c.onerror = (u) => {
        i(u);
      }, c.onsuccess = (u) => {
        s();
      };
    });
  }
}
class pn {
  static async getIsOnline() {
    return navigator.onLine;
  }
  static listen(e) {
    const n = () => {
      e(!0);
    }, r = () => {
      e(!1);
    };
    return addEventListener("online", n), addEventListener("offline", r), () => {
      removeEventListener("online", n), removeEventListener("offline", r);
    };
  }
}
async function Q(t, e) {
  const n = await fetch(t, e), r = await n.json();
  return n.status === 200 ? Promise.resolve(r) : Promise.reject({ status: n.status, body: r });
}
function bs({
  apiURI: t,
  appId: e,
  email: n
}) {
  return Q(`${t}/runtime/auth/send_magic_code`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ "app-id": e, email: n })
  });
}
async function _s({
  apiURI: t,
  appId: e,
  email: n,
  code: r
}) {
  return await Q(`${t}/runtime/auth/verify_magic_code`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ "app-id": e, email: n, code: r })
  });
}
async function ws({
  apiURI: t,
  appId: e,
  refreshToken: n
}) {
  return await Q(`${t}/runtime/auth/verify_refresh_token`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      "app-id": e,
      "refresh-token": n
    })
  });
}
async function Tt({
  apiURI: t,
  appId: e,
  code: n,
  codeVerifier: r
}) {
  return await Q(`${t}/runtime/oauth/token`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      app_id: e,
      code: n,
      code_verifier: r
    })
  });
}
async function gs({
  apiURI: t,
  appId: e,
  nonce: n,
  idToken: r,
  clientName: s,
  refreshToken: i
}) {
  return await Q(`${t}/runtime/oauth/id_token`, {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      app_id: e,
      nonce: n,
      id_token: r,
      client_name: s,
      refresh_token: i
    })
  });
}
async function ms({
  apiURI: t,
  appId: e,
  refreshToken: n
}) {
  return await Q(`${t}/runtime/signout`, {
    method: "POST",
    headers: {
      "content-type": "application/json"
    },
    body: JSON.stringify({
      app_id: e,
      refresh_token: n
    })
  });
}
async function Ss({
  apiURI: t,
  appId: e,
  path: n,
  file: r,
  refreshToken: s,
  contentType: i,
  contentDisposition: o
}) {
  const a = {
    app_id: e,
    path: n,
    authorization: `Bearer ${s}`,
    "content-type": i || r.type
  };
  return o && (a["content-disposition"] = o), await Q(`${t}/storage/upload`, {
    method: "PUT",
    headers: a,
    body: r
  });
}
async function Os({
  apiURI: t,
  appId: e,
  path: n,
  refreshToken: r
}) {
  const { data: s } = await Q(
    `${t}/storage/files?app_id=${e}&filename=${encodeURIComponent(n)}`,
    {
      method: "DELETE",
      headers: {
        "content-type": "application/json",
        authorization: `Bearer ${r}`
      }
    }
  );
  return s;
}
async function vs({
  apiURI: t,
  appId: e,
  fileName: n,
  refreshToken: r,
  metadata: s = {}
}) {
  const { data: i } = await Q(`${t}/storage/signed-upload-url`, {
    method: "POST",
    headers: {
      "content-type": "application/json",
      authorization: `Bearer ${r}`
    },
    body: JSON.stringify({
      app_id: e,
      filename: n
    })
  });
  return i;
}
async function Ms(t, e) {
  return (await fetch(t, {
    method: "PUT",
    body: e,
    headers: {
      "Content-Type": e.type
    }
  })).ok;
}
async function Ps({
  apiURI: t,
  appId: e,
  path: n,
  refreshToken: r
}) {
  const { data: s } = await Q(
    `${t}/storage/signed-download-url?app_id=${e}&filename=${encodeURIComponent(
      n
    )}`,
    {
      method: "GET",
      headers: {
        "content-type": "application/json",
        authorization: `Bearer ${r}`
      }
    }
  );
  return s;
}
function xt(t, e) {
  if (!e) return t;
  const n = {};
  return e.forEach((r) => {
    n[r] = t[r];
  }), n;
}
function As(t, e, n) {
  const r = {
    peers: {}
  };
  if (e && "user" in e ? e.user : !0) {
    const i = xt(t.user ?? {}, e == null ? void 0 : e.keys);
    r.user = { ...i, peerId: n };
  }
  for (const i of Object.keys(t.peers ?? {})) {
    const o = (e == null ? void 0 : e.peers) === void 0, a = Array.isArray(e == null ? void 0 : e.peers) && (e == null ? void 0 : e.peers.includes(i));
    if (o || a) {
      const c = xt(t.peers[i], e == null ? void 0 : e.keys);
      r.peers[i] = { ...c, peerId: i };
    }
  }
  return r;
}
function Cs(t, e) {
  if (t.isLoading !== e.isLoading || t.error !== e.error || (t.user || e.user) && (!t.user || !e.user || !Ot(t.user, e.user)) || !Ht(t.peers, e.peers)) return !0;
  for (const r of Object.keys(t.peers))
    if (!Ot(t.peers[r], e.peers[r])) return !0;
  return !1;
}
class $t {
  constructor() {
    y(this, "promise");
    y(this, "_resolve");
    y(this, "_reject");
    this.promise = new Promise((e, n) => {
      this._resolve = e, this._reject = n;
    });
  }
  resolve(e) {
    this._resolve(e);
  }
  reject(e) {
    this._reject(e);
  }
}
class Ut {
  constructor(e, n, r, s, i = (c) => JSON.stringify(c), o = (c) => JSON.parse(c), a = 100) {
    y(this, "_subs", []);
    this._persister = e, this._key = n, this._onMerge = s, this._loadedCbs = [], this._isLoading = !0, this.currentValue = r, this.toJSON = i, this.fromJSON = o, this._saveThrottleMs = a, this._pendingSaveCbs = [], this._version = 0, this._load();
  }
  async _load() {
    const e = this.fromJSON(await this._persister.getItem(this._key));
    this._isLoading = !1, this._onMerge(e, this.currentValue);
    for (const n of this._loadedCbs)
      n();
  }
  async waitForLoaded() {
    if (!this._isLoading)
      return;
    await new Promise((n) => {
      this._loadedCbs.push(n);
    });
  }
  isLoading() {
    return this._isLoading;
  }
  version() {
    return this._version;
  }
  async waitForSync() {
    if (!this._nextSave)
      return;
    await new Promise((n) => {
      this._pendingSaveCbs.push(n);
    });
  }
  _writeToStorage() {
    this._persister.setItem(this._key, this.toJSON(this.currentValue));
    for (const e of this._pendingSaveCbs)
      e();
    this._pendingSaveCbs.length = 0;
  }
  async flush() {
    this._nextSave && (clearTimeout(this._nextSave), this._writeToStorage());
  }
  _enqueuePersist(e) {
    if (this._nextSave) {
      e && this._pendingSaveCbs.push(e);
      return;
    }
    this._nextSave = setTimeout(() => {
      this._nextSave = null, this._writeToStorage();
    }, this._saveThrottleMs);
  }
  set(e, n) {
    this._version++, this.currentValue = e(this.currentValue), this._isLoading ? this._loadedCbs.push(() => this._enqueuePersist(n)) : this._enqueuePersist(n);
    for (const r of this._subs)
      r(this.currentValue);
  }
  subscribe(e) {
    return this._subs.push(e), e(this.currentValue), () => {
      this._subs = this._subs.filter((n) => n !== e);
    };
  }
}
function yn(t, e = []) {
  t.forEach((n) => {
    const { data: r } = n, { "datalog-result": s } = r, { "join-rows": i } = s;
    for (const o of i)
      for (const a of o)
        e.push(a);
    yn(n["child-nodes"], e);
  });
}
function Dt(t) {
  const e = [];
  return yn(t, e), e;
}
function ks(t) {
  return Object.values(t.links).reduce((e, n) => {
    var r, s;
    return e[r = n.forward.on] ?? (e[r] = {}), e[n.forward.on][n.forward.label] = {
      isForward: !0,
      isSingular: n.forward.has === "one",
      link: n
    }, e[s = n.reverse.on] ?? (e[s] = {}), e[n.reverse.on][n.reverse.label] = {
      isForward: !1,
      isSingular: n.reverse.has === "one",
      link: n
    }, e;
  }, {});
}
const bn = "v0.18.3", B = {
  CONNECTING: "connecting",
  OPENED: "opened",
  AUTHENTICATED: "authenticated",
  CLOSED: "closed",
  ERRORED: "errored"
}, Es = 3e4, Is = 0, Nt = 1, Rs = {
  apiURI: "https://api.instantdb.com",
  websocketURI: "wss://api.instantdb.com/runtime/session"
}, Re = "_instant_oauth_redirect", je = "currentUser";
let js = 0;
function Ts(t) {
  const e = new WebSocket(t);
  return e._id = js++, e;
}
function xs() {
  return typeof window < "u" || typeof chrome < "u";
}
const Lt = {
  "set-presence": !0,
  "set-presence-ok": !0,
  "refresh-presence": !0,
  "patch-presence": !0
};
function $s(t) {
  var n;
  const e = JSON.parse(t);
  for (const r in e) {
    const s = e[r];
    (n = s == null ? void 0 : s.result) != null && n.store && (s.result.store = Ln(s.result.store));
  }
  return e;
}
function Us(t) {
  var n;
  const e = {};
  for (const r in t) {
    const s = t[r], i = { ...s };
    (n = s.result) != null && n.store && (i.result = {
      ...s.result,
      store: Nn(s.result.store)
    }), e[r] = i;
  }
  return JSON.stringify(e);
}
class Ds {
  constructor(e, n = hn, r = pn, s) {
    y(this, "attrs");
    y(this, "_isOnline", !0);
    y(this, "_isShutdown", !1);
    y(this, "status", B.CONNECTING);
    /** @type {PersistedObject} */
    y(this, "querySubs");
    /** @type {PersistedObject} */
    y(this, "pendingMutations");
    /** @type {Record<string, Array<{ q: any, cb: (data: any) => any }>>} */
    y(this, "queryCbs", {});
    /** @type {Record<string, Array<{ q: any, eventId: string, dfd: Deferred }>>} */
    y(this, "queryOnceDfds", {});
    y(this, "authCbs", []);
    y(this, "attrsCbs", []);
    y(this, "mutationErrorCbs", []);
    y(this, "connectionStatusCbs", []);
    y(this, "config");
    y(this, "_persister");
    y(this, "mutationDeferredStore", /* @__PURE__ */ new Map());
    y(this, "_reconnectTimeoutId", null);
    y(this, "_reconnectTimeoutMs", 0);
    y(this, "_ws");
    y(this, "_localIdPromises", {});
    y(this, "_errorMessage", null);
    /** @type {Promise<null | {error: {message: string}}>}**/
    y(this, "_oauthCallbackResponse", null);
    /** @type {null | import('./utils/linkIndex').LinkIndex}} */
    y(this, "_linkIndex", null);
    /** @type BroadcastChannel | undefined */
    y(this, "_broadcastChannel");
    /** @type {Record<string, {isConnected: boolean; error: any}>} */
    y(this, "_rooms", {});
    /** @type {Record<string, boolean>} */
    y(this, "_roomsPendingLeave", {});
    y(this, "_presence", {});
    y(this, "_broadcastQueue", []);
    y(this, "_broadcastSubs", {});
    y(this, "_currentUserCached", { isLoading: !0, error: void 0, user: void 0 });
    y(this, "_beforeUnloadCbs", []);
    y(this, "_dataForQueryCache", {});
    /**
     *  merge querySubs from storage and in memory. Has the following side
     *  effects:
     *  - We notify all queryCbs because results may been added during merge
     */
    y(this, "_onMergeQuerySubs", (e, n) => {
      const r = e || {}, s = { ...n };
      Object.entries(n).forEach(([o, a]) => {
        var f;
        const c = (f = r == null ? void 0 : r[o]) == null ? void 0 : f.result, u = a.result;
        c && !u && (s[o].result = c);
      }), Object.keys(r).filter((o) => !n[o]).slice(0, 10).forEach((o) => {
        s[o] = r[o];
      }), this.querySubs.set((o) => s), this.loadedNotifyAll();
    });
    /**
     * merge pendingMutations from storage and in memory. Has a side effect of
     * sending mutations that were stored but not acked
     */
    y(this, "_onMergePendingMutations", (e, n) => {
      const r = new Map([...e.entries(), ...n.entries()]);
      this.pendingMutations.set((i) => r), this.loadedNotifyAll(), this._rewriteMutations(
        this.attrs,
        e
      ).forEach((i, o) => {
        !n.has(o) && !i["tx-id"] && this._sendMutation(o, i);
      });
    });
    // ---------------------------
    // Queries
    y(this, "getPreviousResult", (e) => {
      const n = N(e);
      return this.dataForQuery(n);
    });
    /** Re-run instaql and call all callbacks with new data */
    y(this, "notifyOne", (e) => {
      var i;
      const n = this.queryCbs[e] ?? [], r = (i = this._dataForQueryCache[e]) == null ? void 0 : i.data, s = this.dataForQuery(e);
      s && (_e(s, r) || n.forEach((o) => o.cb(s)));
    });
    y(this, "notifyOneQueryOnce", (e) => {
      const n = this.queryOnceDfds[e] ?? [], r = this.dataForQuery(e);
      n.forEach((s) => {
        this._completeQueryOnce(s.q, e, s.dfd), s.dfd.resolve(r);
      });
    });
    y(this, "notifyQueryError", (e, n) => {
      (this.queryCbs[e] || []).forEach((s) => s.cb({ error: n }));
    });
    /** Applies transactions locally and sends transact message to server */
    y(this, "pushTx", (e) => {
      try {
        const n = ys(
          { attrs: this.optimisticAttrs(), schema: this.config.schema },
          e
        );
        return this.pushOps(n);
      } catch (n) {
        return this.pushOps([], n);
      }
    });
    /**
     * @param {*} txSteps
     * @param {*} [error]
     * @returns
     */
    y(this, "pushOps", (e, n) => {
      const r = C(), s = {
        op: "transact",
        "tx-steps": e,
        error: n
      };
      this.pendingMutations.set((o) => (o.set(r, s), o));
      const i = new $t();
      return this.mutationDeferredStore.set(r, i), this._sendMutation(r, s), this.notifyAll(), i.promise;
    });
    y(this, "_wsOnOpen", (e) => {
      const n = e.target;
      if (this._ws !== n) {
        P.info(
          "[socket][open]",
          n._id,
          "skip; this is no longer the current ws"
        );
        return;
      }
      P.info("[socket][open]", this._ws._id), this._setStatus(B.OPENED), this.getCurrentUser().then((r) => {
        var s;
        this._trySend(C(), {
          op: "init",
          "app-id": this.config.appId,
          "refresh-token": (s = r.user) == null ? void 0 : s.refresh_token,
          versions: this.versions,
          // If an admin token is provided for an app, we will
          // skip all permission checks. This is an advanced feature,
          // to let users write internal tools
          // This option is not exposed in `Config`, as it's
          // not ready for prime time
          "__admin-token": this.config.__adminToken
        });
      });
    });
    y(this, "_wsOnMessage", (e) => {
      const n = e.target, r = JSON.parse(e.data.toString());
      if (this._ws !== n) {
        P.info(
          "[socket][message]",
          n._id,
          r,
          "skip; this is no longer the current ws"
        );
        return;
      }
      this._handleReceive(n._id, JSON.parse(e.data.toString()));
    });
    y(this, "_wsOnError", (e) => {
      const n = e.target;
      if (this._ws !== n) {
        P.info(
          "[socket][error]",
          n._id,
          "skip; this is no longer the current ws"
        );
        return;
      }
      P.error("[socket][error]", n._id, e);
    });
    y(this, "_wsOnClose", (e) => {
      const n = e.target;
      if (this._ws !== n) {
        P.info(
          "[socket][close]",
          n._id,
          "skip; this is no longer the current ws"
        );
        return;
      }
      this._setStatus(B.CLOSED);
      for (const r of Object.values(this._rooms))
        r.isConnected = !1;
      if (this._isShutdown) {
        P.info(
          "[socket][close]",
          n._id,
          "Reactor has been shut down and will not reconnect"
        );
        return;
      }
      P.info(
        "[socket][close]",
        n._id,
        "schedule reconnect, ms =",
        this._reconnectTimeoutMs
      ), setTimeout(() => {
        if (this._reconnectTimeoutMs = Math.min(
          this._reconnectTimeoutMs + 1e3,
          1e4
        ), !this._isOnline) {
          P.info(
            "[socket][close]",
            n._id,
            "we are offline, no need to start socket"
          );
          return;
        }
        this._startSocket();
      }, this._reconnectTimeoutMs);
    });
    this.config = { ...Rs, ...e }, this.versions = { ...s || {}, "@instantdb/core": bn }, this.config.schema && (this._linkIndex = ks(this.config.schema)), xs() && (typeof BroadcastChannel == "function" && (this._broadcastChannel = new BroadcastChannel("@instantdb"), this._broadcastChannel.addEventListener("message", async (i) => {
      var o;
      if (((o = i.data) == null ? void 0 : o.type) === "auth") {
        const a = await this.getCurrentUser();
        this.updateUser(a.user);
      }
    })), this._oauthCallbackResponse = this._oauthLoginInit(), this._initStorage(n), this.getCurrentUser(), r.getIsOnline().then((i) => {
      this._isOnline = i, this._startSocket(), r.listen((o) => {
        o !== this._isOnline && (P.info("[network] online =", o), this._isOnline = o, this._isOnline ? this._startSocket() : (P.info("Changing status from", this.status, "to", B.CLOSED), this._setStatus(B.CLOSED)));
      });
    }), typeof addEventListener < "u" && (this._beforeUnload = this._beforeUnload.bind(this), addEventListener("beforeunload", this._beforeUnload)));
  }
  _initStorage(e) {
    this._persister = new e(`instant_${this.config.appId}_5`), this.querySubs = new Ut(
      this._persister,
      "querySubs",
      {},
      this._onMergeQuerySubs,
      Us,
      $s
    ), this.pendingMutations = new Ut(
      this._persister,
      "pendingMutations",
      /* @__PURE__ */ new Map(),
      this._onMergePendingMutations,
      (n) => JSON.stringify([...n.entries()]),
      (n) => new Map(JSON.parse(n))
    ), this._beforeUnloadCbs.push(() => {
      this.pendingMutations.flush(), this.querySubs.flush();
    });
  }
  _beforeUnload() {
    for (const e of this._beforeUnloadCbs)
      e();
  }
  /**
   * @param {'enqueued' | 'pending' | 'synced' | 'timeout' |  'error' } status
   * @param string clientId
   * @param {{message?: string, hint?: string, error?: Error}} [errDetails]
   */
  _finishTransaction(e, n, r) {
    const s = this.mutationDeferredStore.get(n);
    this.mutationDeferredStore.delete(n);
    const i = e !== "error" && e !== "timeout";
    !s && !i && console.error("Mutation failed", { status: e, clientId: n, ...r }), s && (i ? s.resolve({ status: e, clientId: n }) : s.reject({ status: e, clientId: n, ...r }));
  }
  _setStatus(e, n) {
    this.status = e, this._errorMessage = n, this.notifyConnectionStatusSubs(e);
  }
  _flushEnqueuedRoomData(e) {
    var s, i;
    const n = (i = (s = this._presence[e]) == null ? void 0 : s.result) == null ? void 0 : i.user, r = this._broadcastQueue[e];
    if (this._broadcastQueue[e] = [], n && this._trySetPresence(e, n), r)
      for (const o of r) {
        const { topic: a, roomType: c, data: u } = o;
        this._tryBroadcast(e, c, a, u);
      }
  }
  _handleReceive(e, n) {
    var s, i, o, a;
    const r = !!this.config.schema && ("cardinalityInference" in this.config ? !!this.config.cardinalityInference : !0);
    switch (Lt[n.op] || P.info("[receive]", e, n.op, n), n.op) {
      case "init-ok":
        this._setStatus(B.AUTHENTICATED), this._reconnectTimeoutMs = 0, this._setAttrs(n.attrs), this._flushPendingMessages(), this._sessionId = n["session-id"];
        for (const O of Object.keys(this._rooms))
          this._tryJoinRoom(O);
        break;
      case "add-query-exists":
        this.notifyOneQueryOnce(N(n.q));
        break;
      case "add-query-ok":
        const { q: c, result: u } = n, f = N(c), l = (i = (s = u == null ? void 0 : u[0]) == null ? void 0 : s.data) == null ? void 0 : i["page-info"], d = (a = (o = u == null ? void 0 : u[0]) == null ? void 0 : o.data) == null ? void 0 : a.aggregate, h = Dt(u), p = Le(
          this.attrs,
          h,
          r,
          this._linkIndex
        );
        this.querySubs.set((O) => (O[f].result = { store: p, pageInfo: l, aggregate: d }, O)), this.notifyOne(f), this.notifyOneQueryOnce(f);
        break;
      case "refresh-ok":
        const { computations: b, attrs: _ } = n;
        this._setAttrs(_);
        const w = b.map((O) => {
          var pt, yt, bt, _t;
          const J = O["instaql-query"], L = O["instaql-result"], G = N(J), Y = Dt(L), Ce = Le(
            this.attrs,
            Y,
            r,
            this._linkIndex
          ), wn = (yt = (pt = L == null ? void 0 : L[0]) == null ? void 0 : pt.data) == null ? void 0 : yt["page-info"], gn = (_t = (bt = L == null ? void 0 : L[0]) == null ? void 0 : bt.data) == null ? void 0 : _t.aggregate;
          return { hash: G, store: Ce, pageInfo: wn, aggregate: gn };
        });
        w.forEach(({ hash: O, store: J, pageInfo: L, aggregate: G }) => {
          this.querySubs.set((Y) => (Y[O].result = { store: J, pageInfo: L, aggregate: G }, Y));
        }), w.forEach(({ hash: O }) => {
          this.notifyOne(O);
        });
        break;
      case "transact-ok":
        const { "client-event-id": S, "tx-id": v } = n, g = this._rewriteMutations(
          this.attrs,
          this.pendingMutations.currentValue
        ).get(S);
        if (!g)
          break;
        this.pendingMutations.set((O) => (O.delete(S), O));
        const I = g["tx-steps"];
        this.querySubs.set((O) => {
          var J;
          for (const [L, G] of Object.entries(O)) {
            const Y = (J = G == null ? void 0 : G.result) == null ? void 0 : J.store;
            if (!Y)
              continue;
            const Ce = Mt(Y, I);
            O[L].result.store = Ce;
          }
          return O;
        });
        const j = g["tx-steps"].filter(([O, ...J]) => O === "add-attr").map(([O, J]) => J).concat(Object.values(this.attrs));
        this._setAttrs(j), this._finishTransaction("synced", S);
        break;
      case "patch-presence": {
        const O = n["room-id"];
        this._patchPresencePeers(O, n.edits), this._notifyPresenceSubs(O);
        break;
      }
      case "refresh-presence": {
        const O = n["room-id"];
        this._setPresencePeers(O, n.data), this._notifyPresenceSubs(O);
        break;
      }
      case "server-broadcast":
        const z = n["room-id"], Ae = n.topic;
        this._notifyBroadcastSubs(z, Ae, n);
        break;
      case "join-room-ok":
        const ne = n["room-id"], lt = this._rooms[ne];
        if (!lt) {
          this._roomsPendingLeave[ne] && (this._tryLeaveRoom(ne), delete this._roomsPendingLeave[ne]);
          break;
        }
        lt.isConnected = !0, this._notifyPresenceSubs(ne), this._flushEnqueuedRoomData(ne);
        break;
      case "join-room-error":
        const dt = n["room-id"], ht = this._rooms[dt];
        ht && (ht.error = n.error), this._notifyPresenceSubs(dt);
        break;
      case "error":
        this._handleReceiveError(n);
        break;
    }
  }
  /**
   * @param {'timeout' | 'error'} status
   * @param {string} eventId
   * @param {{message?: string, hint?: string, error?: Error}} errDetails
   */
  _handleMutationError(e, n, r) {
    const s = this.pendingMutations.currentValue.get(n);
    s && (e !== "timeout" || !s["tx-id"]) && (this.pendingMutations.set((i) => (i.delete(n), i)), this.notifyAll(), this.notifyAttrsSubs(), this.notifyMutationErrorSubs(r), this._finishTransaction(e, n, r));
  }
  _handleReceiveError(e) {
    var a, c, u, f, l;
    const n = e["client-event-id"], r = this.pendingMutations.currentValue.get(n), s = {
      message: e.message || "Uh-oh, something went wrong. Ping Joe & Stopa."
    };
    if (e.hint && (s.hint = e.hint), r) {
      const d = {
        message: e.message,
        hint: e.hint
      };
      this._handleMutationError("error", n, d);
      return;
    }
    if ((a = e["original-event"]) != null && a.hasOwnProperty("q") && ((c = e["original-event"]) == null ? void 0 : c.op) === "add-query") {
      const d = (u = e["original-event"]) == null ? void 0 : u.q, h = N(d);
      this.notifyQueryError(N(d), s), this.notifyQueryOnceError(d, h, n, s);
      return;
    }
    if (((f = e["original-event"]) == null ? void 0 : f.op) === "init") {
      if (e.type === "record-not-found" && ((l = e.hint) == null ? void 0 : l["record-type"]) === "app-user") {
        this.changeCurrentUser(null);
        return;
      }
      this._setStatus(B.ERRORED, s), this.notifyAll();
      return;
    }
    const o = { ...e };
    delete o.message, delete o.hint, console.error(e.message, o), e.hint && console.error(
      `This error comes with some debugging information. Here it is: 
`,
      e.hint
    );
  }
  notifyQueryOnceError(e, n, r, s) {
    var o;
    const i = (o = this.queryOnceDfds[n]) == null ? void 0 : o.find((a) => a.eventId === r);
    i && (i.dfd.reject(s), this._completeQueryOnce(e, n, i.dfd));
  }
  _setAttrs(e) {
    this.attrs = e.reduce((n, r) => (n[r.id] = r, n), {}), this.notifyAttrsSubs();
  }
  _startQuerySub(e, n) {
    const r = C();
    return this.querySubs.set((s) => (s[n] = s[n] || { q: e, result: null, eventId: r }, s)), this._trySendAuthed(r, { op: "add-query", q: e }), r;
  }
  /**
   *  When a user subscribes to a query the following side effects occur:
   *
   *  - We update querySubs to include the new query
   *  - We update queryCbs to include the new cb
   *  - If we already have a result for the query we call cb immediately
   *  - We send the server an `add-query` message
   *
   *  Returns an unsubscribe function
   */
  subscribeQuery(e, n, r) {
    r && "ruleParams" in r && (e = { $$ruleParams: r.ruleParams, ...e });
    const s = N(e), i = this.getPreviousResult(e);
    return i && n(i), this.queryCbs[s] = this.queryCbs[s] ?? [], this.queryCbs[s].push({ q: e, cb: n }), this._startQuerySub(e, s), () => {
      this._unsubQuery(e, s, n);
    };
  }
  queryOnce(e, n) {
    n && "ruleParams" in n && (e = { $$ruleParams: n.ruleParams, ...e });
    const r = new $t();
    if (!this._isOnline)
      return r.reject(
        new Error("We can't run `queryOnce`, because the device is offline.")
      ), r.promise;
    if (!this.querySubs)
      return r.reject(
        new Error(
          "We can't run `queryOnce` on the backend. Use adminAPI.query instead: https://www.instantdb.com/docs/backend#query"
        )
      ), r.promise;
    const s = N(e), i = this._startQuerySub(e, s);
    return this.queryOnceDfds[s] = this.queryOnceDfds[s] ?? [], this.queryOnceDfds[s].push({ q: e, dfd: r, eventId: i }), setTimeout(
      () => r.reject(new Error("Query timed out")),
      Es
    ), r.promise;
  }
  _completeQueryOnce(e, n, r) {
    this.queryOnceDfds[n] && (this.queryOnceDfds[n] = this.queryOnceDfds[n].filter(
      (s) => s.dfd !== r
    ), this._cleanupQuery(e, n));
  }
  _unsubQuery(e, n, r) {
    this.queryCbs[n] && (this.queryCbs[n] = this.queryCbs[n].filter((s) => s.cb !== r), this._cleanupQuery(e, n));
  }
  _cleanupQuery(e, n) {
    var s, i;
    (s = this.queryCbs[n]) != null && s.length || (i = this.queryOnceDfds[n]) != null && i.length || (delete this.queryCbs[n], delete this.queryOnceDfds[n], this._trySendAuthed(C(), { op: "remove-query", q: e }));
  }
  // When we `pushTx`, it's possible that we don't yet have `this.attrs`
  // This means that `tx-steps` in `pendingMutations` will include `add-attr`
  // commands for attrs that already exist.
  //
  // This will also affect `add-triple` and `retract-triple` which
  // reference attr-ids that do not match the server.
  //
  // We fix this by rewriting `tx-steps` in each `pendingMutation`.
  // We remove `add-attr` commands for attrs that already exist.
  // We update `add-triple` and `retract-triple` commands to use the
  // server attr-ids.
  _rewriteMutations(e, n) {
    if (!e) return n;
    const r = (c) => {
      const [u, f, l] = c["forward-identity"];
      return E(e, f, l);
    }, s = (c) => {
      const [u, f, l] = c["forward-identity"];
      return Z(e, f, l);
    }, i = { attrIdMap: {}, refSwapAttrIds: /* @__PURE__ */ new Set() }, o = (c) => {
      const u = [];
      for (const f of c) {
        const [l] = f;
        if (l === "add-attr") {
          const [h, p] = f, b = r(p);
          if (b) {
            i.attrIdMap[p.id] = b.id;
            continue;
          }
          if (p["value-type"] === "ref") {
            const _ = s(p);
            if (_) {
              i.attrIdMap[p.id] = _.id, i.refSwapAttrIds.add(p.id);
              continue;
            }
          }
        }
        const d = Br(i, f);
        u.push(d);
      }
      return u;
    }, a = /* @__PURE__ */ new Map();
    for (const [c, u] of n.entries())
      a.set(c, { ...u, "tx-steps": o(u["tx-steps"]) });
    return a;
  }
  // ---------------------------
  // Transact
  optimisticAttrs() {
    var o;
    const e = [
      ...this.pendingMutations.currentValue.values()
    ].flatMap((a) => a["tx-steps"]), n = new Set(
      e.filter(([a, c]) => a === "delete-attr").map(([a, c]) => c)
    ), r = [];
    for (const [a, c] of e)
      if (a === "add-attr")
        r.push(c);
      else if (a === "update-attr" && c.id && ((o = this.attrs) != null && o[c.id])) {
        const u = { ...this.attrs[c.id], ...c };
        r.push(u);
      }
    const s = [
      ...Object.values(this.attrs || {}),
      ...r
    ].filter((a) => !n.has(a.id));
    return Object.fromEntries(
      s.map((a) => [a.id, a])
    );
  }
  /** Runs instaql on a query and a store */
  dataForQuery(e) {
    const n = this._errorMessage;
    if (n)
      return { error: n };
    if (!this.querySubs || !this.pendingMutations) return;
    const r = this.querySubs.version(), s = this.querySubs.currentValue, i = this.pendingMutations.version(), o = this.pendingMutations.currentValue, { q: a, result: c } = s[e] || {};
    if (!c) return;
    const u = this._dataForQueryCache[e];
    if (u && r === u.querySubVersion && i === u.pendingMutationsVersion)
      return u.data;
    const { store: f, pageInfo: l, aggregate: d } = c, p = [...this._rewriteMutations(f.attrs, o).values()].flatMap((w) => w["tx-steps"]), b = Mt(f, p), _ = zr({ store: b, pageInfo: l, aggregate: d }, a);
    return this._dataForQueryCache[e] = {
      querySubVersion: r,
      pendingMutationsVersion: i,
      data: _
    }, _;
  }
  /** Re-compute all subscriptions */
  notifyAll() {
    Object.keys(this.queryCbs).forEach((e) => {
      this.notifyOne(e);
    });
  }
  loadedNotifyAll() {
    this.pendingMutations.isLoading() || this.querySubs.isLoading() || this.notifyAll();
  }
  shutdown() {
    var e;
    this._isShutdown = !0, (e = this._ws) == null || e.close();
  }
  /**
   * Sends mutation to server and schedules a timeout to cancel it if
   * we don't hear back in time.
   * Note: If we're offline we don't schedule a timeout, we'll schedule it
   * later once we're back online and send the mutation again
   *
   */
  _sendMutation(e, n) {
    if (n.error) {
      this._handleMutationError("error", e, {
        error: n.error,
        message: n.error.message
      });
      return;
    }
    if (this.status !== B.AUTHENTICATED) {
      this._finishTransaction("enqueued", e);
      return;
    }
    const r = Math.max(
      5e3,
      this.pendingMutations.currentValue.size * 5e3
    );
    this._isOnline ? (this._trySend(e, n), setTimeout(() => {
      this._finishTransaction("pending", e);
    }, 3e3), setTimeout(() => {
      this._isOnline && this._handleMutationError("timeout", e, {
        message: "transaction timed out"
      });
    }, r)) : this._finishTransaction("enqueued", e);
  }
  // ---------------------------
  // Websocket
  /** Send messages we accumulated while we were connecting */
  _flushPendingMessages() {
    Object.keys(this.queryCbs).map((s) => this.querySubs.currentValue[s]).filter((s) => s).forEach(({ eventId: s, q: i }) => {
      this._trySendAuthed(s, { op: "add-query", q: i });
    }), Object.values(this.queryOnceDfds).flat().forEach(({ eventId: s, q: i }) => {
      this._trySendAuthed(s, { op: "add-query", q: i });
    }), this._rewriteMutations(
      this.attrs,
      this.pendingMutations.currentValue
    ).forEach((s, i) => {
      s["tx-id"] || this._sendMutation(i, s);
    });
  }
  _trySendAuthed(...e) {
    this.status === B.AUTHENTICATED && this._trySend(...e);
  }
  _trySend(e, n, r) {
    this._ws.readyState === Nt && (Lt[n.op] || P.info("[send]", this._ws._id, n.op, n), this._ws.send(JSON.stringify({ "client-event-id": e, ...n })));
  }
  _startSocket() {
    if (this._ws && this._ws.readyState == Is) {
      P.info(
        "[socket][start]",
        this._ws._id,
        "maintained as current ws, we were still in a connecting state"
      );
      return;
    }
    const e = this._ws;
    this._ws = Ts(
      `${this.config.websocketURI}?app_id=${this.config.appId}`
    ), this._ws.onopen = this._wsOnOpen, this._ws.onmessage = this._wsOnMessage, this._ws.onclose = this._wsOnClose, this._ws.onerror = this._wsOnError, P.info("[socket][start]", this._ws._id), (e == null ? void 0 : e.readyState) === Nt && (P.info(
      "[socket][start]",
      this._ws._id,
      "close previous ws id = ",
      e._id
    ), e.close());
  }
  /**
   * Given a key, returns a stable local id, unique to this device and app.
   *
   * This can be useful if you want to create guest ids for example.
   *
   * Note: If the user deletes their local storage, this id will change.
   *
   * We use this._localIdPromises to ensure that we only generate a local
   * id once, even if multiple callers call this function concurrently.
   */
  async getLocalId(e) {
    const n = `localToken_${e}`, r = await this._persister.getItem(n);
    if (r) return r;
    if (this._localIdPromises[n])
      return this._localIdPromises[n];
    const s = C();
    return this._localIdPromises[n] = this._persister.setItem(n, s).then(() => s), this._localIdPromises[n];
  }
  // ----
  // Auth
  _replaceUrlAfterOAuth() {
    if (typeof URL > "u")
      return;
    const e = new URL(window.location.href);
    if (e.searchParams.get(Re)) {
      const n = e.toString();
      e.searchParams.delete(Re), e.searchParams.delete("code"), e.searchParams.delete("error");
      const r = e.pathname + (e.searchParams.size ? "?" + e.searchParams : "") + e.hash;
      if (history.replaceState(history.state, "", r), // @ts-ignore (waiting for ts support)
      typeof navigation == "object" && // @ts-ignore (waiting for ts support)
      typeof navigation.addEventListener == "function" && // @ts-ignore (waiting for ts support)
      typeof navigation.removeEventListener == "function") {
        let s = !1;
        const i = (o) => {
          var a;
          s || (s = !0, navigation.removeEventListener("navigate", i), !o.userInitiated && o.navigationType === "replace" && ((a = o.destination) == null ? void 0 : a.url) === n && history.replaceState(history.state, "", r));
        };
        navigation.addEventListener("navigate", i);
      }
    }
  }
  /**
   *
   * @returns Promise<null | {error: {message: string}}>
   */
  async _oauthLoginInit() {
    var s, i, o, a;
    if (typeof window > "u" || typeof window.location > "u" || typeof URLSearchParams > "u")
      return null;
    const e = new URLSearchParams(window.location.search);
    if (!e.get(Re))
      return null;
    const n = e.get("error");
    if (n)
      return this._replaceUrlAfterOAuth(), { error: { message: n } };
    const r = e.get("code");
    if (!r)
      return null;
    this._replaceUrlAfterOAuth();
    try {
      const { user: c } = await Tt({
        apiURI: this.config.apiURI,
        appId: this.config.appId,
        code: r
      });
      return this.setCurrentUser(c), null;
    } catch (c) {
      return ((s = c == null ? void 0 : c.body) == null ? void 0 : s.type) === "record-not-found" && ((o = (i = c == null ? void 0 : c.body) == null ? void 0 : i.hint) == null ? void 0 : o["record-type"]) === "app-oauth-code" && await this._hasCurrentUser() ? null : { error: { message: ((a = c == null ? void 0 : c.body) == null ? void 0 : a.message) || "Error logging in." } };
    }
  }
  async _waitForOAuthCallbackResponse() {
    return await this._oauthCallbackResponse;
  }
  __subscribeMutationErrors(e) {
    return this.mutationErrorCbs.push(e), () => {
      this.mutationErrorCbs = this.mutationErrorCbs.filter((n) => n !== e);
    };
  }
  subscribeAuth(e) {
    this.authCbs.push(e);
    const n = this._currentUserCached;
    n.isLoading || e(this._currentUserCached);
    let r = !1;
    return this.getCurrentUser().then((s) => {
      r || _e(s, n) || e(s);
    }), () => {
      r = !0, this.authCbs = this.authCbs.filter((s) => s !== e);
    };
  }
  async getAuth() {
    const { user: e, error: n } = await this.getCurrentUser();
    if (n)
      throw n;
    return e;
  }
  subscribeConnectionStatus(e) {
    return this.connectionStatusCbs.push(e), () => {
      this.connectionStatusCbs = this.connectionStatusCbs.filter(
        (n) => n !== e
      );
    };
  }
  subscribeAttrs(e) {
    return this.attrsCbs.push(e), this.attrs && e(this.attrs), () => {
      this.attrsCbs = this.attrsCbs.filter((n) => n !== e);
    };
  }
  notifyAuthSubs(e) {
    this.authCbs.forEach((n) => n(e));
  }
  notifyMutationErrorSubs(e) {
    this.mutationErrorCbs.forEach((n) => n(e));
  }
  notifyAttrsSubs() {
    if (!this.attrs) return;
    const e = this.optimisticAttrs();
    this.attrsCbs.forEach((n) => n(e));
  }
  notifyConnectionStatusSubs(e) {
    this.connectionStatusCbs.forEach((n) => n(e));
  }
  async setCurrentUser(e) {
    await this._persister.setItem(je, JSON.stringify(e));
  }
  getCurrentUserCached() {
    return this._currentUserCached;
  }
  async getCurrentUser() {
    const e = await this._waitForOAuthCallbackResponse();
    if (e != null && e.error) {
      const s = { error: e.error, user: void 0 };
      return this._currentUserCached = { isLoading: !1, ...s }, s;
    }
    const n = await this._persister.getItem(je), r = { user: JSON.parse(n), error: void 0 };
    return this._currentUserCached = {
      isLoading: !1,
      ...r
    }, r;
  }
  async _hasCurrentUser() {
    const e = await this._persister.getItem(je);
    return JSON.parse(e) != null;
  }
  async changeCurrentUser(e) {
    var r;
    const { user: n } = await this.getCurrentUser();
    if (!_e(n, e)) {
      await this.setCurrentUser(e), this.updateUser(e);
      try {
        (r = this._broadcastChannel) == null || r.postMessage({ type: "auth" });
      } catch (s) {
        console.error("Error posting message to broadcast channel", s);
      }
    }
  }
  updateUser(e) {
    const n = { error: void 0, user: e };
    this._currentUserCached = { isLoading: !1, ...n }, this._dataForQueryCache = {}, this.querySubs.set((r) => (Object.keys(r).forEach((s) => {
      delete r[s].result;
    }), r)), this._reconnectTimeoutMs = 0, this._ws.close(), this._oauthCallbackResponse = null, this.notifyAuthSubs(n);
  }
  sendMagicCode({ email: e }) {
    return bs({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      email: e
    });
  }
  async signInWithMagicCode({ email: e, code: n }) {
    const r = await _s({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      email: e,
      code: n
    });
    return await this.changeCurrentUser(r.user), r;
  }
  async signInWithCustomToken(e) {
    const n = await ws({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      refreshToken: e
    });
    return await this.changeCurrentUser(n.user), n;
  }
  potentiallyInvalidateToken(e, n) {
    var i;
    const r = (i = e == null ? void 0 : e.user) == null ? void 0 : i.refresh_token;
    if (!r)
      return;
    if (n.invalidateToken === !1) {
      P.info("[auth-invalidate] skipped invalidateToken");
      return;
    }
    ms({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      refreshToken: r
    }).then(() => {
      P.info("[auth-invalidate] completed invalidateToken");
    }).catch((o) => {
    });
  }
  async signOut(e) {
    const n = await this.getCurrentUser();
    this.potentiallyInvalidateToken(n, e), await this.changeCurrentUser(null);
  }
  /**
   * Creates an OAuth authorization URL.
   * @param {Object} params - The parameters to create the authorization URL.
   * @param {string} params.clientName - The name of the client requesting authorization.
   * @param {string} params.redirectURL - The URL to redirect users to after authorization.
   * @returns {string} The created authorization URL.
   */
  createAuthorizationURL({ clientName: e, redirectURL: n }) {
    const { apiURI: r, appId: s } = this.config;
    return `${r}/runtime/oauth/start?app_id=${s}&client_name=${e}&redirect_uri=${n}`;
  }
  /**
   * @param {Object} params
   * @param {string} params.code - The code received from the OAuth service.
   * @param {string} [params.codeVerifier] - The code verifier used to generate the code challenge.
   */
  async exchangeCodeForToken({ code: e, codeVerifier: n }) {
    const r = await Tt({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      code: e,
      codeVerifier: n
    });
    return await this.changeCurrentUser(r.user), r;
  }
  issuerURI() {
    const { apiURI: e, appId: n } = this.config;
    return `${e}/runtime/${n}`;
  }
  /**
   * @param {Object} params
   * @param {string} params.clientName - The name of the client requesting authorization.
   * @param {string} params.idToken - The id_token from the external service
   * @param {string | null | undefined} [params.nonce] - The nonce used when requesting the id_token from the external service
   */
  async signInWithIdToken({ idToken: e, clientName: n, nonce: r }) {
    var a;
    const s = await this.getCurrentUser(), i = (a = s == null ? void 0 : s.user) == null ? void 0 : a.refresh_token, o = await gs({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      idToken: e,
      clientName: n,
      nonce: r,
      refreshToken: i
    });
    return await this.changeCurrentUser(o.user), o;
  }
  // --------
  // Rooms
  joinRoom(e) {
    return this._rooms[e] || (this._rooms[e] = {
      isConnected: !1,
      error: void 0
    }), this._presence[e] = this._presence[e] || {}, this._tryJoinRoom(e), () => {
      this._cleanupRoom(e);
    };
  }
  _cleanupRoom(e) {
    var n, r, s;
    if (!((r = (n = this._presence[e]) == null ? void 0 : n.handlers) != null && r.length) && !Object.keys(this._broadcastSubs[e] ?? {}).length) {
      const i = (s = this._rooms[e]) == null ? void 0 : s.isConnected;
      delete this._rooms[e], delete this._presence[e], delete this._broadcastSubs[e], i ? this._tryLeaveRoom(e) : this._roomsPendingLeave[e] = !0;
    }
  }
  // --------
  // Presence
  // TODO: look into typing again
  getPresence(e, n, r = {}) {
    const s = this._rooms[n], i = this._presence[n];
    return !s || !i || !i.result ? null : {
      ...As(i.result, r, this._sessionId),
      isLoading: !s.isConnected,
      error: s.error
    };
  }
  // TODO: look into typing again
  publishPresence(e, n, r) {
    const s = this._rooms[n], i = this._presence[n];
    if (!s || !i)
      return;
    i.result = i.result || {};
    const o = {
      ...i.result.user,
      ...r
    };
    i.result.user = o, s.isConnected && (this._trySetPresence(n, o), this._notifyPresenceSubs(n));
  }
  _trySetPresence(e, n) {
    this._trySendAuthed(C(), {
      op: "set-presence",
      "room-id": e,
      data: n
    });
  }
  _tryJoinRoom(e) {
    this._trySendAuthed(C(), { op: "join-room", "room-id": e }), delete this._roomsPendingLeave[e];
  }
  _tryLeaveRoom(e) {
    this._trySendAuthed(C(), { op: "leave-room", "room-id": e });
  }
  // TODO: look into typing again
  subscribePresence(e, n, r, s) {
    const i = this.joinRoom(n), o = { ...r, roomId: n, cb: s, prev: null };
    return this._presence[n] = this._presence[n] || {}, this._presence[n].handlers = this._presence[n].handlers || [], this._presence[n].handlers.push(o), this._notifyPresenceSub(n, o), () => {
      var a, c;
      this._presence[n].handlers = ((c = (a = this._presence[n]) == null ? void 0 : a.handlers) == null ? void 0 : c.filter((u) => u !== o)) ?? [], i();
    };
  }
  _notifyPresenceSubs(e) {
    var n, r;
    (r = (n = this._presence[e]) == null ? void 0 : n.handlers) == null || r.forEach((s) => {
      this._notifyPresenceSub(e, s);
    });
  }
  _notifyPresenceSub(e, n) {
    const r = this.getPresence("", e, n);
    r && (n.prev && !Cs(r, n.prev) || (n.prev = r, n.cb(r)));
  }
  _patchPresencePeers(e, n) {
    var o, a, c;
    const r = ((a = (o = this._presence[e]) == null ? void 0 : o.result) == null ? void 0 : a.peers) || {};
    let s = Object.fromEntries(
      Object.entries(r).map(([u, f]) => [u, { data: f }])
    );
    (c = this._presence[e]) == null || c.result;
    const i = Ne(s, (u) => {
      for (let [f, l, d] of n)
        switch (l) {
          case "+":
            $n(u, f, d);
            break;
          case "r":
            vt(u, f, d);
            break;
          case "-":
            Xt(u, f);
            break;
        }
      delete u[this._sessionId];
    });
    this._setPresencePeers(e, i);
  }
  _setPresencePeers(e, n) {
    const r = { ...n };
    delete r[this._sessionId];
    const s = Object.fromEntries(
      Object.entries(r).map(([i, o]) => [i, o.data])
    );
    this._presence = Ne(this._presence, (i) => {
      vt(i, [e, "result", "peers"], s);
    });
  }
  // --------
  // Broadcast
  publishTopic({ roomType: e, roomId: n, topic: r, data: s }) {
    const i = this._rooms[n];
    if (i) {
      if (!i.isConnected) {
        this._broadcastQueue[n] = this._broadcastQueue[n] ?? [], this._broadcastQueue[n].push({ topic: r, roomType: e, data: s });
        return;
      }
      this._tryBroadcast(n, e, r, s);
    }
  }
  _tryBroadcast(e, n, r, s) {
    this._trySendAuthed(C(), {
      op: "client-broadcast",
      "room-id": e,
      roomType: n,
      topic: r,
      data: s
    });
  }
  subscribeTopic(e, n, r) {
    const s = this.joinRoom(e);
    return this._broadcastSubs[e] = this._broadcastSubs[e] || {}, this._broadcastSubs[e][n] = this._broadcastSubs[e][n] || [], this._broadcastSubs[e][n].push(r), this._presence[e] = this._presence[e] || {}, () => {
      this._broadcastSubs[e][n] = this._broadcastSubs[e][n].filter((i) => i !== r), this._broadcastSubs[e][n].length || delete this._broadcastSubs[e][n], s();
    };
  }
  _notifyBroadcastSubs(e, n, r) {
    var s, i, o;
    (o = (i = (s = this._broadcastSubs) == null ? void 0 : s[e]) == null ? void 0 : i[n]) == null || o.forEach((a) => {
      var f, l, d, h, p, b;
      const c = (f = r.data) == null ? void 0 : f.data, u = r.data["peer-id"] === this._sessionId ? (d = (l = this._presence[e]) == null ? void 0 : l.result) == null ? void 0 : d.user : (b = (p = (h = this._presence[e]) == null ? void 0 : h.result) == null ? void 0 : p.peers) == null ? void 0 : b[r.data["peer-id"]];
      return a(c, u);
    });
  }
  // --------
  // Storage
  async uploadFile(e, n, r) {
    var o;
    const s = await this.getCurrentUser(), i = (o = s == null ? void 0 : s.user) == null ? void 0 : o.refresh_token;
    return Ss({
      ...r,
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      path: e,
      file: n,
      refreshToken: i
    });
  }
  async deleteFile(e) {
    var i;
    const n = await this.getCurrentUser(), r = (i = n == null ? void 0 : n.user) == null ? void 0 : i.refresh_token;
    return await Os({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      path: e,
      refreshToken: r
    });
  }
  // Deprecated Storage API (Jan 2025)
  // ---------------------------------
  async upload(e, n) {
    var c;
    const r = await this.getCurrentUser(), s = (c = r == null ? void 0 : r.user) == null ? void 0 : c.refresh_token, i = e || n.name, o = await vs({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      fileName: i,
      refreshToken: s
    });
    return await Ms(o, n);
  }
  async getDownloadUrl(e) {
    var i;
    const n = await this.getCurrentUser(), r = (i = n == null ? void 0 : n.user) == null ? void 0 : i.refresh_token;
    return await Ps({
      apiURI: this.config.apiURI,
      appId: this.config.appId,
      path: e,
      refreshToken: r
    });
  }
}
class W {
  constructor(e, n, r = { indexed: !1, unique: !1 }) {
    this.valueType = e, this.required = n, this.config = r;
  }
  optional() {
    return new W(this.valueType, !1);
  }
  unique() {
    return new W(
      this.valueType,
      this.required,
      {
        ...this.config,
        unique: !0
      }
    );
  }
  indexed() {
    return new W(
      this.valueType,
      this.required,
      {
        ...this.config,
        indexed: !0
      }
    );
  }
  // clientValidate(clientValidator: (value: ValueType) => boolean) {
  //   return new DataAttrDef(this.valueType, this.required, {
  //     ...this.config,
  //     clientValidator,
  //   });
  // }
}
class Me {
  constructor(e, n) {
    this.attrs = e, this.links = n;
  }
  asType() {
    return new Me(this.attrs, this.links);
  }
}
class Pe {
  constructor(e, n, r) {
    this.entities = e, this.links = n, this.rooms = r;
  }
  /**
   * @deprecated
   * `withRoomSchema` is deprecated. Define your schema in `rooms` directly:
   *
   * @example
   * // Before:
   * const schema = i.schema({
   *   // ...
   * }).withRoomSchema<RoomSchema>()
   *
   * // After
   * const schema = i.schema({
   *  rooms: {
   *    // ...
   *  }
   * })
   *
   * @see https://instantdb.com/docs/presence-and-topics#typesafety
   */
  withRoomSchema() {
    return new Pe(
      this.entities,
      this.links,
      {}
    );
  }
}
function Ns(t, e) {
  return new Pe(
    _n(t, e),
    // (XXX): LinksDef<any> stems from TypeScript’s inability to reconcile the
    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with
    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are
    // correctly aligned and does not allow for substituting a type that might
    // be broader or have additional properties.
    e,
    void 0
  );
}
function Ls(t) {
  return new Me(t, {});
}
function qs() {
  return new W("string", !0);
}
function Fs() {
  return new W("number", !0);
}
function zs() {
  return new W("boolean", !0);
}
function Vs() {
  return new W("date", !0);
}
function Ws() {
  return new W("json", !0);
}
function Qs() {
  return new W("json", !0);
}
function _n(t, e) {
  var s, i, o, a;
  const n = { fwd: {}, rev: {} };
  for (const c of Object.values(e))
    (s = n.fwd)[i = c.forward.on] || (s[i] = {}), (o = n.rev)[a = c.reverse.on] || (o[a] = {}), n.fwd[c.forward.on][c.forward.label] = {
      entityName: c.reverse.on,
      cardinality: c.forward.has
    }, n.rev[c.reverse.on][c.reverse.label] = {
      entityName: c.forward.on,
      cardinality: c.reverse.has
    };
  return Object.fromEntries(
    Object.entries(t).map(([c, u]) => [
      c,
      new Me(u.attrs, {
        ...n.fwd[c],
        ...n.rev[c]
      })
    ])
  );
}
function Js({
  entities: t,
  links: e,
  rooms: n
}) {
  const r = e ?? {}, s = n ?? {};
  return new Pe(
    _n(t, r),
    // (XXX): LinksDef<any> stems from TypeScript’s inability to reconcile the
    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with
    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are
    // correctly aligned and does not allow for substituting a type that might
    // be broader or have additional properties.
    r,
    s
  );
}
const fi = {
  // constructs
  graph: Ns,
  schema: Js,
  entity: Ls,
  // value types
  string: qs,
  number: Fs,
  boolean: zs,
  date: Vs,
  json: Ws,
  any: Qs
};
let pe;
function Bs(t, e) {
  pe == null || pe.dispose();
  const n = Zs(e), r = Gs(e, a), s = Hs(Ks(t));
  function i(f) {
    var l;
    f.source === s.element.contentWindow && ((l = f.data) == null ? void 0 : l.type) === "close" && n.isVisible() && a();
  }
  function o(f) {
    const l = f.shiftKey && f.ctrlKey && f.key === "0", d = f.key === "Escape" || f.key === "Esc";
    (l || d && n.isVisible()) && a();
  }
  function a() {
    n.isVisible() ? n.element.style.display = "none" : (n.element.style.display = "block", n.element.contains(s.element) || n.element.appendChild(s.element));
  }
  function c() {
    n.element.remove(), r.element.remove(), removeEventListener("keydown", o), removeEventListener("message", i);
  }
  function u() {
    document.body.appendChild(n.element), document.body.appendChild(r.element), addEventListener("keydown", o), addEventListener("message", i), pe = {
      dispose: c
    };
  }
  return u();
}
function Ks(t) {
  return `${Xe || Ft ? "http://localhost:3000" : "https://instantdb.com"}/_devtool?appId=${t}`;
}
function Hs(t) {
  const e = document.createElement("iframe");
  return e.src = t, e.className = "instant-devtool-iframe", Object.assign(e.style, {
    width: "100%",
    height: "100%",
    backgroundColor: "white",
    border: "none"
  }), { element: e };
}
function Gs(t, e) {
  const n = `
    <svg width="32" height="32" viewBox="0 0 512 512" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="512" height="512" fill="black"/>
      <rect x="97.0973" y="91.3297" width="140" height="330" fill="white"/>
    </svg>
  `, r = document.createElement("button");
  return r.innerHTML = n, r.className = "instant-devtool-toggler", Object.assign(r.style, {
    // pos
    position: "fixed",
    ...Ys(t.position),
    height: "32px",
    width: "32px",
    // layout
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    zIndex: "9010",
    // look
    padding: "0",
    margin: "0",
    border: "none",
    cursor: "pointer"
  }), r.addEventListener("click", e), { element: r };
}
function Ys(t) {
  switch (t) {
    case "bottom-left":
      return { bottom: "24px", left: "24px" };
    case "bottom-right":
      return { bottom: "24px", right: "24px" };
    case "top-right":
      return { top: "24px", right: "24px" };
    case "top-left":
      return { top: "24px", left: "24px" };
  }
}
function Xs(t) {
  switch (t) {
    case "bottom-left":
      return { bottom: "24px", right: "24px", left: "60px", top: "72px" };
    case "bottom-right":
      return { bottom: "24px", left: "24px", right: "60px", top: "72px" };
    case "top-right":
      return { top: "24px", left: "24px", right: "60px", bottom: "72px" };
    case "top-left":
      return { top: "24px", right: "24px", left: "60px", bottom: "72px" };
  }
}
function Zs(t) {
  const e = document.createElement("div");
  Object.assign(e.style, {
    position: "fixed",
    ...Xs(t.position),
    display: "block",
    borderRadius: "4px",
    border: "1px #ccc solid",
    boxShadow: "0px 0px 8px #00000044",
    backgroundColor: "#eee",
    zIndex: "999990"
  }), e.style.display = "none", e.className = "instant-devtool-container";
  function n() {
    return e.style.display !== "none";
  }
  return { element: e, isVisible: n };
}
const ei = {
  apiURI: "https://api.instantdb.com",
  websocketURI: "wss://api.instantdb.com/runtime/session"
};
function ti() {
  return globalThis.__instantDbStore = globalThis.__instantDbStore ?? {}, globalThis.__instantDbStore;
}
function Ge(t) {
  const e = t.__adminToken;
  return t.appId + "_" + (t.websocketURI || "default_ws_uri") + "_" + (t.apiURI || "default_api_uri") + "_" + (e || "client_only");
}
const Ye = ti();
class ni {
  constructor(e) {
    this.db = e, this.sendMagicCode = (n) => this.db.sendMagicCode(n), this.signInWithMagicCode = (n) => this.db.signInWithMagicCode(n), this.signInWithToken = (n) => this.db.signInWithCustomToken(n), this.createAuthorizationURL = (n) => this.db.createAuthorizationURL(n), this.signInWithIdToken = (n) => this.db.signInWithIdToken(n), this.exchangeOAuthCode = (n) => this.db.exchangeCodeForToken(n), this.issuerURI = () => this.db.issuerURI(), this.signOut = (n = { invalidateToken: !0 }) => this.db.signOut(n);
  }
}
class ri {
  constructor(e) {
    this.db = e, this.uploadFile = (n, r, s = {}) => this.db.uploadFile(n, r, s), this.delete = (n) => this.db.deleteFile(n), this.upload = (n, r) => this.db.upload(n, r), this.put = this.upload, this.getDownloadUrl = (n) => this.db.getDownloadUrl(n);
  }
}
function li(t) {
  return JSON.parse(JSON.stringify(t));
}
class si {
  constructor(e) {
    this.tx = ln(), this._reactor = e, this.auth = new ni(this._reactor), this.storage = new ri(this._reactor);
  }
  /**
   * Use this to write data! You can create, update, delete, and link objects
   *
   * @see https://instantdb.com/docs/instaml
   *
   * @example
   *   // Create a new object in the `goals` namespace
   *   const goalId = id();
   *   db.transact(db.tx.goals[goalId].update({title: "Get fit"}))
   *
   *   // Update the title
   *   db.transact(db.tx.goals[goalId].update({title: "Get super fit"}))
   *
   *   // Delete it
   *   db.transact(db.tx.goals[goalId].delete())
   *
   *   // Or create an association:
   *   todoId = id();
   *   db.transact([
   *    db.tx.todos[todoId].update({ title: 'Go on a run' }),
   *    db.tx.goals[goalId].link({todos: todoId}),
   *  ])
   */
  transact(e) {
    return this._reactor.pushTx(e);
  }
  getLocalId(e) {
    return this._reactor.getLocalId(e);
  }
  /**
   * Use this to query your data!
   *
   * @see https://instantdb.com/docs/instaql
   *
   * @example
   *  // listen to all goals
   *  db.subscribeQuery({ goals: {} }, (resp) => {
   *    console.log(resp.data.goals)
   *  })
   *
   *  // goals where the title is "Get Fit"
   *  db.subscribeQuery(
   *    { goals: { $: { where: { title: "Get Fit" } } } },
   *    (resp) => {
   *      console.log(resp.data.goals)
   *    }
   *  )
   *
   *  // all goals, _alongside_ their todos
   *  db.subscribeQuery({ goals: { todos: {} } }, (resp) => {
   *    console.log(resp.data.goals)
   *  });
   */
  subscribeQuery(e, n, r) {
    return this._reactor.subscribeQuery(e, n, r);
  }
  /**
   * Listen for the logged in state. This is useful
   * for deciding when to show a login screen.
   *
   * @see https://instantdb.com/docs/auth
   * @example
   *   const unsub = db.subscribeAuth((auth) => {
   *     if (auth.user) {
   *     console.log('logged in as', auth.user.email)
   *    } else {
   *      console.log('logged out')
   *    }
   *  })
   */
  subscribeAuth(e) {
    return this._reactor.subscribeAuth(e);
  }
  /**
   * One time query for the logged in state. This is useful
   * for scenarios where you want to know the current auth
   * state without subscribing to changes.
   *
   * @see https://instantdb.com/docs/auth
   * @example
   *   const user = await db.getAuth();
   *   console.log('logged in as', user.email)
   */
  getAuth() {
    return this._reactor.getAuth();
  }
  /**
   * Listen for connection status changes to Instant. This is useful
   * for building things like connectivity indicators
   *
   * @see https://www.instantdb.com/docs/patterns#connection-status
   * @example
   *   const unsub = db.subscribeConnectionStatus((status) => {
   *     const connectionState =
   *       status === 'connecting' || status === 'opened'
   *         ? 'authenticating'
   *       : status === 'authenticated'
   *         ? 'connected'
   *       : status === 'closed'
   *         ? 'closed'
   *       : status === 'errored'
   *         ? 'errored'
   *       : 'unexpected state';
   *
   *     console.log('Connection status:', connectionState);
   *   });
   */
  subscribeConnectionStatus(e) {
    return this._reactor.subscribeConnectionStatus(e);
  }
  /**
   * Join a room to publish and subscribe to topics and presence.
   *
   * @see https://instantdb.com/docs/presence-and-topics
   * @example
   * // init
   * const db = init();
   * const room = db.joinRoom(roomType, roomId);
   * // usage
   * const unsubscribeTopic = room.subscribeTopic("foo", console.log);
   * const unsubscribePresence = room.subscribePresence({}, console.log);
   * room.publishTopic("hello", { message: "hello world!" });
   * room.publishPresence({ name: "joe" });
   * // later
   * unsubscribePresence();
   * unsubscribeTopic();
   * room.leaveRoom();
   */
  joinRoom(e = "_defaultRoomType", n = "_defaultRoomId") {
    return {
      leaveRoom: this._reactor.joinRoom(n),
      subscribeTopic: (s, i) => this._reactor.subscribeTopic(n, s, i),
      subscribePresence: (s, i) => this._reactor.subscribePresence(e, n, s, i),
      publishTopic: (s, i) => this._reactor.publishTopic({ roomType: e, roomId: n, topic: s, data: i }),
      publishPresence: (s) => this._reactor.publishPresence(e, n, s),
      getPresence: (s) => this._reactor.getPresence(e, n, s)
    };
  }
  shutdown() {
    delete Ye[Ge(this._reactor.config)], this._reactor.shutdown();
  }
  /**
   * Use this for one-off queries.
   * Returns local data if available, otherwise fetches from the server.
   * Because we want to avoid stale data, this method will throw an error
   * if the user is offline or there is no active connection to the server.
   *
   * @see https://instantdb.com/docs/instaql
   *
   * @example
   *
   *  const resp = await db.queryOnce({ goals: {} });
   *  console.log(resp.data.goals)
   */
  queryOnce(e, n) {
    return this._reactor.queryOnce(e, n);
  }
}
function ii(t, e, n, r) {
  const s = Ye[Ge(t)];
  if (s)
    return s;
  const i = new Ds(
    {
      ...ei,
      ...t,
      cardinalityInference: !!t.schema
    },
    e || hn,
    n || pn,
    { ...r || {}, "@instantdb/core": bn }
  ), o = new si(i);
  return Ye[Ge(t)] = o, oi(t.appId, t.devtool), o;
}
function oi(t, e) {
  if (typeof window > "u" || typeof window.location > "u" || typeof document > "u" || typeof e == "boolean" && !e)
    return;
  const n = {
    position: "bottom-right",
    allowedHosts: ["localhost"],
    ...typeof e == "object" ? e : {}
  };
  n.allowedHosts.includes(window.location.hostname) && Bs(t, n);
}
const di = ii;
export {
  ni as Auth,
  hn as IndexedDBStorage,
  si as InstantCoreDatabase,
  ri as Storage,
  pn as WindowNetworkListener,
  li as coerceQuery,
  Jr as getOps,
  fi as i,
  C as id,
  ii as init,
  di as init_experimental,
  ci as lookup,
  ui as tx,
  ln as txInit,
  bn as version,
  N as weakHash
};
